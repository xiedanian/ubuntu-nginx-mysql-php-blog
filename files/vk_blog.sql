-- MySQL dump 10.13  Distrib 5.7.20, for linux-glibc2.12 (x86_64)
--
-- Host: 127.0.0.1    Database: vk_blog
-- ------------------------------------------------------
-- Server version	5.7.20-log

/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8 */;
/*!40103 SET @OLD_TIME_ZONE=@@TIME_ZONE */;
/*!40103 SET TIME_ZONE='+00:00' */;
/*!40014 SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0 */;
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;
/*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */;

--
-- Table structure for table `vk_admin`
--

DROP TABLE IF EXISTS `vk_admin`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `vk_admin` (
  `admin_id` int(11) NOT NULL AUTO_INCREMENT COMMENT 'ID',
  `email` varchar(255) NOT NULL COMMENT '邮箱',
  `password` varchar(32) NOT NULL COMMENT '密码',
  `role_id` int(11) NOT NULL DEFAULT '0' COMMENT '角色ID',
  `is_supper` tinyint(2) unsigned NOT NULL DEFAULT '0' COMMENT '是否超管',
  `create_time` int(10) unsigned NOT NULL DEFAULT '0' COMMENT '创建时间',
  `update_time` int(10) unsigned NOT NULL DEFAULT '0' COMMENT '更新时间',
  PRIMARY KEY (`admin_id`)
) ENGINE=InnoDB AUTO_INCREMENT=3 DEFAULT CHARSET=utf8 COMMENT='管理员账户表';
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `vk_admin`
--

LOCK TABLES `vk_admin` WRITE;
/*!40000 ALTER TABLE `vk_admin` DISABLE KEYS */;
INSERT INTO `vk_admin` VALUES (1,'visk','3873928b2920ae06e5aaa6c6101d9ab0',1,1,1514881782,1515745545),(2,'danian','3873928b2920ae06e5aaa6c6101d9ab0',2,0,1514881782,1519813840);
/*!40000 ALTER TABLE `vk_admin` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `vk_admin_menu`
--

DROP TABLE IF EXISTS `vk_admin_menu`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `vk_admin_menu` (
  `menu_id` int(11) NOT NULL AUTO_INCREMENT COMMENT 'ID',
  `pid` int(11) NOT NULL DEFAULT '0' COMMENT '父ID',
  `name` varchar(32) NOT NULL COMMENT '名称',
  `is_menu` tinyint(2) unsigned NOT NULL DEFAULT '0' COMMENT '是否菜单项',
  `weight` int(11) NOT NULL DEFAULT '0' COMMENT '排序权重',
  `uri` varchar(255) NOT NULL COMMENT '动作路径',
  `remark` varchar(255) NOT NULL COMMENT '备注',
  `create_time` int(10) unsigned NOT NULL DEFAULT '0' COMMENT '创建时间',
  `update_time` int(10) unsigned NOT NULL DEFAULT '0' COMMENT '更新时间',
  PRIMARY KEY (`menu_id`)
) ENGINE=InnoDB AUTO_INCREMENT=28 DEFAULT CHARSET=utf8 COMMENT='动作';
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `vk_admin_menu`
--

LOCK TABLES `vk_admin_menu` WRITE;
/*!40000 ALTER TABLE `vk_admin_menu` DISABLE KEYS */;
INSERT INTO `vk_admin_menu` VALUES (1,0,'文章管理',1,0,'--','',1514882256,1514882256),(2,0,'相册管理',1,0,'--','',1514882256,1514882256),(3,0,'用户管理',1,0,'--','',1514882256,1514882256),(4,0,'系统设置',1,0,'--','',1514882256,1514882256),(5,1,'文章列表',1,0,'article/list','',1514882256,1514882256),(6,1,'添加文章',1,0,'article/add','',1514882256,1514882256),(7,1,'编辑文章',0,0,'article/update','',1514882256,1514882256),(8,1,'删除文章',0,0,'article/del','',1514882256,1514882256),(9,2,'相册列表',1,0,'album/list','',1515743990,1515743990),(10,2,'添加相册',1,0,'album/add','',1515744084,1515744084),(11,2,'上传照片',0,0,'album/picsadd','',1515744164,1515744164),(12,2,'编辑相册',0,0,'album/update','',1515744263,1515744263),(13,2,'删除相册',0,0,'album/del','',1515744339,1515744339),(14,3,'用户列表',1,0,'user/list','前台用户列表',1515744388,1515744388),(15,4,'管理员列表',1,0,'admin/adminlist','',1515744434,1515744434),(16,4,'添加管理员',0,0,'admin/adminadd','',1515744487,1515744487),(17,4,'编辑管理员',0,0,'admin/adminedit','',1515744533,1515744533),(18,4,'删除管理员',0,0,'admin/admindel','',1515744593,1515744593),(19,4,'权限管理',1,0,'admin/rolelist','角色列表',1515744705,1515744705),(20,4,'添加角色',1,0,'admin/roleadd','',1515744756,1515744756),(21,4,'编辑角色',1,0,'admin/roleedit','',1515744828,1515744828),(22,4,'删除角色',0,0,'admin/roledel','',1515744866,1515744866),(23,4,'角色授权',0,0,'admin/rolemenuset','',1515744926,1515744926),(24,4,'菜单管理',1,0,'admin/menulist','',1515744990,1515744990),(25,4,'添加菜单',0,0,'admin/menuadd','',1515745031,1515745031),(26,4,'编辑菜单',0,0,'admin/menuedit','',1515745066,1515745066),(27,4,'删除菜单',0,0,'admin/menudel','',1515745088,1515745088);
/*!40000 ALTER TABLE `vk_admin_menu` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `vk_admin_role`
--

DROP TABLE IF EXISTS `vk_admin_role`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `vk_admin_role` (
  `role_id` int(11) NOT NULL AUTO_INCREMENT COMMENT 'ID',
  `role_name` varchar(255) NOT NULL COMMENT '分组名称',
  `act_list` text COMMENT '权限列表',
  `remark` varchar(255) NOT NULL COMMENT '备注',
  `create_time` int(10) unsigned NOT NULL DEFAULT '0' COMMENT '创建时间',
  `update_time` int(10) unsigned NOT NULL DEFAULT '0' COMMENT '更新时间',
  PRIMARY KEY (`role_id`)
) ENGINE=InnoDB AUTO_INCREMENT=3 DEFAULT CHARSET=utf8 COMMENT='管理分组';
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `vk_admin_role`
--

LOCK TABLES `vk_admin_role` WRITE;
/*!40000 ALTER TABLE `vk_admin_role` DISABLE KEYS */;
INSERT INTO `vk_admin_role` VALUES (1,'超级管理员','all','禁止删除',1488785155,1488785155),(2,'编辑','1,2,3,4,5','编辑',1488785155,1488785155);
/*!40000 ALTER TABLE `vk_admin_role` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `vk_admin_role_menu`
--

DROP TABLE IF EXISTS `vk_admin_role_menu`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `vk_admin_role_menu` (
  `role_id` int(11) NOT NULL DEFAULT '0' COMMENT '角色ID',
  `menu_id` int(11) NOT NULL DEFAULT '0' COMMENT '菜单ID',
  UNIQUE KEY `role_id` (`role_id`,`menu_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='角色菜单';
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `vk_admin_role_menu`
--

LOCK TABLES `vk_admin_role_menu` WRITE;
/*!40000 ALTER TABLE `vk_admin_role_menu` DISABLE KEYS */;
INSERT INTO `vk_admin_role_menu` VALUES (2,1),(2,2),(2,3),(2,5),(2,6),(2,7),(2,9),(2,10),(2,11),(2,12),(2,14),(2,17);
/*!40000 ALTER TABLE `vk_admin_role_menu` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `vk_album`
--

DROP TABLE IF EXISTS `vk_album`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `vk_album` (
  `album_id` int(11) unsigned NOT NULL AUTO_INCREMENT,
  `uid` int(11) unsigned NOT NULL DEFAULT '0' COMMENT '用户ID',
  `icon` varchar(255) NOT NULL DEFAULT '' COMMENT '图标',
  `title` varchar(100) NOT NULL DEFAULT '' COMMENT '标题',
  `intro` varchar(1024) NOT NULL DEFAULT '' COMMENT '描述',
  `create_time` int(10) NOT NULL DEFAULT '0' COMMENT '创建时间',
  `update_time` int(10) NOT NULL DEFAULT '0' COMMENT '更新时间',
  `valid` tinyint(2) NOT NULL DEFAULT '1' COMMENT '1有效2无效',
  PRIMARY KEY (`album_id`),
  KEY `user_id` (`uid`)
) ENGINE=InnoDB AUTO_INCREMENT=5 DEFAULT CHARSET=utf8 COMMENT='相册表';
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `vk_album`
--

LOCK TABLES `vk_album` WRITE;
/*!40000 ALTER TABLE `vk_album` DISABLE KEYS */;
INSERT INTO `vk_album` VALUES (1,1,'http://blog-visk.oss-cn-shenzhen.aliyuncs.com/20170919/pDwzCJQtEB.jpg','青春靓影','承载了青春记忆的小姐姐们，遇到了她们人生才完美！',1505664238,1507653713,1),(2,1,'http://blog-visk.oss-cn-shenzhen.aliyuncs.com/20170919/ZpJ434j2hF.jpg','美女摄影师Katara作品集','人气美女Katara摄影师独家作品集，长期更新！！！',1505833866,1505834405,1),(3,1,'http://blog-visk.oss-cn-shenzhen.aliyuncs.com/20170919/ehrfznrEKm.jpg','测试相册','',1506005149,1506005149,2),(4,1,'http://blog-visk.oss-cn-shenzhen.aliyuncs.com/20171010/6yeik7435n.JPG','国庆赣州游','赣州，简称“虔”，别称“虔城”，也称“赣南”，位于江西省南部是江西省面积最大、人口最多的地级市。\n\n必吃特产：\n赣南脐橙、齐云山南酸枣糕 、宁都肉丸。\n\n红色故都\n赣州是全国著名的革命老区，是中华人民共和国的摇篮，也是中央红军长征出发地和南方红军三年游击战争的中心区域。\n\n客家摇篮\n　　赣州是客家先民南迁的第一站，是客家人最早的集散地，是当今设区市中最大的客家人聚居地，是客家文化的主要发祥地。\n\n江南宋城\n　　赣州是一座具有2200多年历史的国家历史文化名城，城内遍布历代文物，尤以宋城文化最为璀璨，被誉为“宋城博物馆”。\n',1507645450,1515745340,1);
/*!40000 ALTER TABLE `vk_album` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `vk_album_pics`
--

DROP TABLE IF EXISTS `vk_album_pics`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `vk_album_pics` (
  `id` int(11) unsigned NOT NULL AUTO_INCREMENT,
  `album_id` int(11) unsigned NOT NULL DEFAULT '0' COMMENT '相册id',
  `url` varchar(255) NOT NULL DEFAULT '' COMMENT '图片url',
  `intro` varchar(1024) NOT NULL DEFAULT '' COMMENT '描述',
  `sort` tinyint(4) NOT NULL COMMENT '排序',
  `is_deleted` tinyint(1) DEFAULT '0',
  `create_time` int(10) NOT NULL DEFAULT '0' COMMENT '创建时间',
  PRIMARY KEY (`id`),
  KEY `album_id` (`album_id`)
) ENGINE=InnoDB AUTO_INCREMENT=30 DEFAULT CHARSET=utf8 COMMENT='相册图片表';
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `vk_album_pics`
--

LOCK TABLES `vk_album_pics` WRITE;
/*!40000 ALTER TABLE `vk_album_pics` DISABLE KEYS */;
INSERT INTO `vk_album_pics` VALUES (1,1,'http://blog-visk.oss-cn-shenzhen.aliyuncs.com/20170919/YWJNpiHhdS.jpg','',1,0,1505832879),(2,1,'http://blog-visk.oss-cn-shenzhen.aliyuncs.com/20170919/pDwzCJQtEB.jpg','',2,0,1505832879),(3,1,'http://blog-visk.oss-cn-shenzhen.aliyuncs.com/20170919/ehrfznrEKm.jpg','',3,0,1505832879),(4,1,'http://blog-visk.oss-cn-shenzhen.aliyuncs.com/20170919/ihdiTC8ZWN.jpg','',4,1,1505832879),(5,1,'http://blog-visk.oss-cn-shenzhen.aliyuncs.com/20170919/EsmSwBsD3J.jpg','',5,0,1505833270),(6,2,'http://blog-visk.oss-cn-shenzhen.aliyuncs.com/20170919/Ef63inW6zz.jpg','',4,0,1505834097),(7,2,'http://blog-visk.oss-cn-shenzhen.aliyuncs.com/20170919/GEtHaHeyZw.jpg','',5,0,1505834097),(8,2,'http://blog-visk.oss-cn-shenzhen.aliyuncs.com/20170919/rYjja8CBi8.jpg','',3,0,1505834097),(9,2,'http://blog-visk.oss-cn-shenzhen.aliyuncs.com/20170919/zbaT2faya3.jpg','',2,0,1505834097),(10,2,'http://blog-visk.oss-cn-shenzhen.aliyuncs.com/20170919/x3PrsPYPHJ.jpg','',1,0,1505834097),(11,4,'http://blog-visk.oss-cn-shenzhen.aliyuncs.com/20171010/NditszCCjB.JPG','',0,0,1507647835),(12,4,'http://blog-visk.oss-cn-shenzhen.aliyuncs.com/20171010/7FC4TF7pEW.JPG','',0,0,1507647835),(13,4,'http://blog-visk.oss-cn-shenzhen.aliyuncs.com/20171010/rHQCjH6bwm.JPG','',0,0,1507647835),(14,4,'http://blog-visk.oss-cn-shenzhen.aliyuncs.com/20171010/fcb4mfzFDi.JPG','',0,0,1507647835),(15,4,'http://blog-visk.oss-cn-shenzhen.aliyuncs.com/20171010/skSPAYhEMz.JPG','',0,0,1507647835),(16,4,'http://blog-visk.oss-cn-shenzhen.aliyuncs.com/20171010/wWfrXZCQZd.JPG','',0,0,1507647835),(17,4,'http://blog-visk.oss-cn-shenzhen.aliyuncs.com/20171010/4KfDGpm62Q.JPG','',0,0,1507647835),(18,4,'http://blog-visk.oss-cn-shenzhen.aliyuncs.com/20171010/ni7N4sjewC.JPG','',0,0,1507647835),(19,4,'http://blog-visk.oss-cn-shenzhen.aliyuncs.com/20171010/AHAC8S4BpM.JPG','',0,0,1507647835),(20,4,'http://blog-visk.oss-cn-shenzhen.aliyuncs.com/20171010/ieCCWcSGSN.JPG','',0,0,1507647835),(21,4,'http://blog-visk.oss-cn-shenzhen.aliyuncs.com/20171010/stA7tmJtFi.JPG','',0,0,1507647835),(22,4,'http://blog-visk.oss-cn-shenzhen.aliyuncs.com/20171010/zr8xYEBajh.JPG','',0,0,1507647835),(23,4,'http://blog-visk.oss-cn-shenzhen.aliyuncs.com/20171010/2AixtsPsRZ.JPG','',0,0,1507647835),(24,4,'http://blog-visk.oss-cn-shenzhen.aliyuncs.com/20171010/a36k6TYC8D.JPG','',0,0,1507647835),(25,4,'http://blog-visk.oss-cn-shenzhen.aliyuncs.com/20171010/hbFXaZtZ6Q.JPG','',0,0,1507647835),(26,4,'http://blog-visk.oss-cn-shenzhen.aliyuncs.com/20171010/JhBk5CQz8D.JPG','',0,0,1507647835),(27,4,'http://blog-visk.oss-cn-shenzhen.aliyuncs.com/20171010/mHdSwn7MtR.JPG','',0,0,1507647835),(28,4,'http://blog-visk.oss-cn-shenzhen.aliyuncs.com/20171010/Yp3sDQNAxj.JPG\r\n','',0,0,1507647835),(29,4,'http://blog-visk.oss-cn-shenzhen.aliyuncs.com/20171011/GhwmjEPrXh.JPG','',0,0,1507652568);
/*!40000 ALTER TABLE `vk_album_pics` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `vk_article`
--

DROP TABLE IF EXISTS `vk_article`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `vk_article` (
  `id` int(11) NOT NULL AUTO_INCREMENT COMMENT '文章ID',
  `uid` int(11) NOT NULL COMMENT '用户ID',
  `category_id` int(11) NOT NULL COMMENT '分类ID',
  `title` varchar(120) NOT NULL COMMENT '文章标题',
  `description` varchar(255) NOT NULL COMMENT '文章描述',
  `content` text NOT NULL COMMENT '文章内容',
  `is_deleted` tinyint(1) NOT NULL DEFAULT '0' COMMENT '是否删除（0：否；1：是）',
  `create_time` int(11) NOT NULL COMMENT '创建时间',
  `update_time` int(11) NOT NULL COMMENT '更新时间',
  PRIMARY KEY (`id`)
) ENGINE=MyISAM AUTO_INCREMENT=10 DEFAULT CHARSET=utf8 COMMENT='文章表';
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `vk_article`
--

LOCK TABLES `vk_article` WRITE;
/*!40000 ALTER TABLE `vk_article` DISABLE KEYS */;
INSERT INTO `vk_article` VALUES (1,1,22,'编辑器的vim模式使用','','<h1 id=\"-vim-\" color:#444444;background-color:#ffffff;\"=\"\" style=\"box-sizing: border-box; word-wrap: break-word; margin: 1em 0px 16px; font-family: &quot;Open Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;microsoft yahei&quot;, sans-serif; line-height: 1.2; color: rgb(68, 68, 68); padding: 0px 0px 0.3em; border-width: 0px 0px 1px; border-top-style: initial; border-right-style: initial; border-bottom-style: solid; border-left-style: initial; border-top-color: initial; border-right-color: initial; border-bottom-color: rgb(238, 238, 238); border-left-color: initial; border-image: initial; outline: 0px; white-space: normal; background-color: rgb(255, 255, 255);\"><img src=\"/public/plugin/kindeditor/attached/image/20171011/20171011161452_63792.jpg\" alt=\"\" /><br />\n	</h1>\n<blockquote color:#777777;background-color:#ffffff;\"=\"\" style=\"box-sizing: border-box; word-wrap: break-word; padding: 0px 15px; margin: 0px 0px 16px; font-size: 14px; border-width: 0px 0px 0px 4px; border-left-style: solid; border-left-color: rgb(221, 221, 221); border-top-style: initial; border-right-style: initial; border-bottom-style: initial; border-top-color: initial; border-right-color: initial; border-bottom-color: initial; border-image: initial; outline: 0px; font-family: &quot;Open Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;microsoft yahei&quot;, sans-serif; color: rgb(119, 119, 119); white-space: normal; background-color: rgb(255, 255, 255);\">\n	<p>\n		好早之前就有小伙伴推荐了编辑器的vim模式，一直没有使用，昨天公司的老师给我讲解了一下vim模式的使用，茅塞顿开啊，终于用上了这高大上的编辑模式，虽然现在还不是很熟练，后面多加使用会很快熟悉的。下面就针对vim模式做一些总结，欢迎小伙伴们提意见。\n	</p>\n		</blockquote>\n<h3 id=\"-vim-\" color:#444444;font-size:1.5em;background-color:#ffffff;\"=\"\" style=\"box-sizing: border-box; word-wrap: break-word; font-family: &quot;Open Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;microsoft yahei&quot;, sans-serif; line-height: 1.43; color: rgb(68, 68, 68); margin: 1em 0px 16px; font-size: 1.5em; padding: 0px; border: 0px; outline: 0px; white-space: normal; background-color: rgb(255, 255, 255);\">一、vim模式介绍：\n			</h3>\n<p color:#444444;font-size:16px;background-color:#ffffff;\"=\"\" style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; padding: 0px; border: 0px; outline: 0px; font-family: &quot;Open Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;microsoft yahei&quot;, sans-serif; color: rgb(68, 68, 68); font-size: 16px; white-space: normal; background-color: rgb(255, 255, 255);\">接触 node 开发的小伙伴一定对终端都不陌生，mac上面的终端更是非常好用，使用终端就免不了要在终端里面编辑一些文件内容，虽然这种编辑方式我们不是非常推荐，但对于一些少量内容的更改与编辑，直接在终端编辑文件无疑是快速与便捷的。\n				</p>\n<p color:#444444;font-size:16px;background-color:#ffffff;\"=\"\" style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; padding: 0px; border: 0px; outline: 0px; font-family: &quot;Open Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;microsoft yahei&quot;, sans-serif; color: rgb(68, 68, 68); font-size: 16px; white-space: normal; background-color: rgb(255, 255, 255);\">在终端编辑文件不像我们在编辑器里面，可以随意使用鼠标或触摸板，来调整光标位置，应对这样的情况，vim里面一些快捷的编辑方式就显得尤为重要，熟悉后我们发现这些快捷的编辑方式使得不那么方便的终端编辑起来也方便快捷了许多。那我们可不可以把这些快捷的编辑方式放到我们日常的工作当中呢，答案是肯定的。\n			</p>\n<p color:#444444;font-size:16px;background-color:#ffffff;\"=\"\" style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; padding: 0px; border: 0px; outline: 0px; font-family: &quot;Open Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;microsoft yahei&quot;, sans-serif; color: rgb(68, 68, 68); font-size: 16px; white-space: normal; background-color: rgb(255, 255, 255);\">废话说了一堆，那到底怎么在编辑器里面使用呢？\n				</p>\n<h3 id=\"-vim-\" color:#444444;font-size:1.5em;background-color:#ffffff;\"=\"\" style=\"box-sizing: border-box; word-wrap: break-word; font-family: &quot;Open Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;microsoft yahei&quot;, sans-serif; line-height: 1.43; color: rgb(68, 68, 68); margin: 1em 0px 16px; font-size: 1.5em; padding: 0px; border: 0px; outline: 0px; white-space: normal; background-color: rgb(255, 255, 255);\">二、vim 编辑模式：\n					</h3>\n<h4 id=\"3-vim-\" color:#444444;font-size:1.25em;background-color:#ffffff;\"=\"\" style=\"box-sizing: border-box; word-wrap: break-word; font-family: &quot;Open Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;microsoft yahei&quot;, sans-serif; line-height: 1.4; color: rgb(68, 68, 68); margin: 1em 0px 16px; font-size: 1.25em; padding: 0px; border: 0px; outline: 0px; white-space: normal; background-color: rgb(255, 255, 255);\">3、vim 模式的使用\n						</h4>\n<p color:#444444;font-size:16px;background-color:#ffffff;\"=\"\" style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; padding: 0px; border: 0px; outline: 0px; font-family: &quot;Open Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;microsoft yahei&quot;, sans-serif; color: rgb(68, 68, 68); font-size: 16px; white-space: normal; background-color: rgb(255, 255, 255);\">vim 模式的语法、快捷键基本都是一致的，所以使用起来比较方便快捷。这里推荐大家使用 vimtutor 教程来学习，我用的mac系统，通过 brew 来安装这个教程，命令为： brew install -g vimtutor 时，有的系统可能需要你使用root 权限来实现全局安装。\n							</p>\n<p color:#444444;font-size:16px;background-color:#ffffff;\"=\"\" style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; padding: 0px; border: 0px; outline: 0px; font-family: &quot;Open Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;microsoft yahei&quot;, sans-serif; color: rgb(68, 68, 68); font-size: 16px; white-space: normal; background-color: rgb(255, 255, 255);\">安装好后可以按照教程一步步练习，快捷键比较多，多多联系，多多使用，很快就能记住的。下面针对我自己的学习进行简单的总结：\n						</p>\n<h4 id=\"4-vim-\" color:#444444;font-size:1.25em;background-color:#ffffff;\"=\"\" style=\"box-sizing: border-box; word-wrap: break-word; font-family: &quot;Open Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;microsoft yahei&quot;, sans-serif; line-height: 1.4; color: rgb(68, 68, 68); margin: 1em 0px 16px; font-size: 1.25em; padding: 0px; border: 0px; outline: 0px; white-space: normal; background-color: rgb(255, 255, 255);\">4、vim 模式的快捷键\n					</h4>\n<ul color:#444444;font-size:16px;background-color:#ffffff;\"=\"\" style=\"box-sizing: border-box; word-wrap: break-word; margin: 0px 0px 16px; padding: 0px 0px 0px 2em; border: 0px; outline: 0px; font-family: &quot;Open Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;microsoft yahei&quot;, sans-serif; list-style-position: initial; list-style-image: initial; color: rgb(68, 68, 68); font-size: 16px; white-space: normal; background-color: rgb(255, 255, 255);\">\n					<li>\n						基本操作\n						<ul>\n							<li>\n								h：光标向左移动一个字符，相当于键盘的左键\n							</li>\n							<li>\n								l：光标向右移动一个字符，相当于键盘的右键\n							</li>\n							<li>\n								j：光标向下移动一行，相当于键盘的下键（上下键总混，把J记成鱼钩，朝下的，以后用就记住了 :））\n							</li>\n							<li>\n								k：光标向上移动一行，相当于键盘的上键\n							</li>\n							<li>\n								0：回到行首\n							</li>\n							<li>\n								$：回到当前行的最后一个字符\n							</li>\n							<li>\n								^：回到当前行第一个不为空的字符\n							</li>\n							<li>\n								g_：回到当前行最后一个不为空的字符\n							</li>\n							<li>\n								gg：回到文档头第一个字符\n							</li>\n							<li>\n								shift+g：回到文档末尾最后一个字符\n							</li>\n							<li>\n								ctrl+g：输入行号光标切换到所查找行\n							</li>\n							<li>\n								q：退出不保存\n							</li>\n							<li>\n								w：保存\n							</li>\n							<li>\n								wq：保存并退出\n							</li>\n							<li>\n								bn bp：可以打开多个文件，这两个命令用来切换上一个或下一个文件\n							</li>\n						</ul>\n					</li>\n					<li>\n						插入相关\n						<ul>\n							<li>\n								i：切换到插入模式\n							</li>\n							<li>\n								o：在下方插入一行，并切换到插入模式\n							</li>\n							<li>\n								shift+o：在上方插入一行，并切换的插入模式\n							</li>\n							<li>\n								a：在光标后插入\n							</li>\n							<li>\n								shift+a：在当前行末尾插入\n							</li>\n							<li>\n								u：撤销上一次的操作\n							</li>\n							<li>\n								shift+u：撤销对整行的操作\n							</li>\n							<li>\n								e：光标切到所在单词的末尾，不过不会切换到编辑模式\n							</li>\n						</ul>\n					</li>\n					<li>\n						删除相关\n						<ul>\n							<li>\n								dw：删除单词，光标需在单词首字母（会同时删除单词后的空格）\n							</li>\n							<li>\n								de：删除单词，光标需在单词首字母（不会删除单词后的空格）\n							</li>\n							<li>\n								d$：删除当前行光标后的内容，开始插入内容（会同时删除光标所在字符）\n							</li>\n							<li>\n								dd：删除当前行\n							</li>\n							<li>\n								x：删除光标所在的字符\n							</li>\n							<li>\n								d：操作前加数字，表示执行该操作的次数，例：2dw 即 删除两个单词\n							</li>\n						</ul>\n					</li>\n					<li>\n						查找相关\n						<ul>\n							<li>\n								/keywords：n 查找多个匹配元素\n							</li>\n							<li>\n								?keywords：n 反向查找多个匹配元素\n							</li>\n							<li>\n								:set xxx：可以设置 xxx 选项。一些有用的选项如下\n								<ul>\n									<li>\n										ic：ignorecase 查找时忽略字母大小写\n									</li>\n									<li>\n										is：incsearch 查找短语时显示部分匹配\n									</li>\n									<li>\n										hls：hlsearch 高亮显示所有的匹配短语\n									</li>\n								</ul>\n							</li>\n							<li>\n								:set noxxx：可以取消设置 xxx 选项。\n							</li>\n							<li>\n								%：光标在&nbsp;(){}[]&nbsp;中的一个上面，按%则光标移到与之匹配的括号上面（atom编辑器上面不好用）\n							</li>\n							<li>\n								* 和 #: 匹配光标当前所在的单词，移动光标到下一个（或上一个）匹配单词（* 是下一个，# 是上一个）\n							</li>\n						</ul>\n					</li>\n						</ul>\n<h3 id=\"-sublime-text-vim-\" color:#444444;font-size:1.5em;background-color:#ffffff;\"=\"\" style=\"box-sizing: border-box; word-wrap: break-word; font-family: &quot;Open Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;microsoft yahei&quot;, sans-serif; line-height: 1.43; color: rgb(68, 68, 68); margin: 1em 0px 16px; font-size: 1.5em; padding: 0px; border: 0px; outline: 0px; white-space: normal; background-color: rgb(255, 255, 255);\">三、sublime text 的 vim 编辑模式：\n							</h3>\n<p color:#444444;font-size:16px;background-color:#ffffff;\"=\"\" style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; padding: 0px; border: 0px; outline: 0px; font-family: &quot;Open Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;microsoft yahei&quot;, sans-serif; color: rgb(68, 68, 68); font-size: 16px; white-space: normal; background-color: rgb(255, 255, 255);\">相信大部分的前端工作者都使用或曾经使用过 sublime text 这个编辑器，小且快，是前端开发不可多得的利器之一。\n								</p>\n<h4 id=\"1-vim-\" color:#444444;font-size:1.25em;background-color:#ffffff;\"=\"\" style=\"box-sizing: border-box; word-wrap: break-word; font-family: &quot;Open Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;microsoft yahei&quot;, sans-serif; line-height: 1.4; color: rgb(68, 68, 68); margin: 1em 0px 16px; font-size: 1.25em; padding: 0px; border: 0px; outline: 0px; white-space: normal; background-color: rgb(255, 255, 255);\">1、设置vim模式\n									</h4>\n<p color:#444444;font-size:16px;background-color:#ffffff;\"=\"\" style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; padding: 0px; border: 0px; outline: 0px; font-family: &quot;Open Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;microsoft yahei&quot;, sans-serif; color: rgb(68, 68, 68); font-size: 16px; white-space: normal; background-color: rgb(255, 255, 255);\">修改 Preference-Settings-User 文件，添加 \"ignored_packages\": []，保存后重启编辑器即设置好了vim编辑模式。\n										</p>\n<h4 id=\"2-vim-\" color:#444444;font-size:1.25em;background-color:#ffffff;\"=\"\" style=\"box-sizing: border-box; word-wrap: break-word; font-family: &quot;Open Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;microsoft yahei&quot;, sans-serif; line-height: 1.4; color: rgb(68, 68, 68); margin: 1em 0px 16px; font-size: 1.25em; padding: 0px; border: 0px; outline: 0px; white-space: normal; background-color: rgb(255, 255, 255);\">2、启动vim模式\n											</h4>\n<p color:#444444;font-size:16px;background-color:#ffffff;\"=\"\" style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; padding: 0px; border: 0px; outline: 0px; font-family: &quot;Open Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;microsoft yahei&quot;, sans-serif; color: rgb(68, 68, 68); font-size: 16px; white-space: normal; background-color: rgb(255, 255, 255);\">启动非常的简单，在英文输入法下，按下ESC键，即开启了vim模式，看到编辑器上面的光标变换为vim模式的光标即设置成功了。\n												</p>\n<h3 id=\"-atom-vim-\" color:#444444;font-size:1.5em;background-color:#ffffff;\"=\"\" style=\"box-sizing: border-box; word-wrap: break-word; font-family: &quot;Open Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;microsoft yahei&quot;, sans-serif; line-height: 1.43; color: rgb(68, 68, 68); margin: 1em 0px 16px; font-size: 1.5em; padding: 0px; border: 0px; outline: 0px; white-space: normal; background-color: rgb(255, 255, 255);\">四、atom 的 vim 编辑模式：\n													</h3>\n<p color:#444444;font-size:16px;background-color:#ffffff;\"=\"\" style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; padding: 0px; border: 0px; outline: 0px; font-family: &quot;Open Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;microsoft yahei&quot;, sans-serif; color: rgb(68, 68, 68); font-size: 16px; white-space: normal; background-color: rgb(255, 255, 255);\">atom 是giyhub开源的一款非常好用的小清新的编辑器，便于前端开发使用，我在上一篇文章中介绍过atom的插件，感兴趣的朋友可以去看看。<a href=\"http://iqianduan.net/blog/the-useful-plugins-for-atom\">传送门：实用的 atom 插件</a>\n														</p>\n<h4 id=\"1-vim-\" color:#444444;font-size:1.25em;background-color:#ffffff;\"=\"\" style=\"box-sizing: border-box; word-wrap: break-word; font-family: &quot;Open Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;microsoft yahei&quot;, sans-serif; line-height: 1.4; color: rgb(68, 68, 68); margin: 1em 0px 16px; font-size: 1.25em; padding: 0px; border: 0px; outline: 0px; white-space: normal; background-color: rgb(255, 255, 255);\">1、设置vim模式\n															</h4>\n<p color:#444444;font-size:16px;background-color:#ffffff;\"=\"\" style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; padding: 0px; border: 0px; outline: 0px; font-family: &quot;Open Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;microsoft yahei&quot;, sans-serif; color: rgb(68, 68, 68); font-size: 16px; white-space: normal; background-color: rgb(255, 255, 255);\">和sublime text 不同，atom 的vim 模式需要安装一个插件，vim-mode。安装启用后即可使用了。\n																</p>\n<h4 id=\"2-vim-\" color:#444444;font-size:1.25em;background-color:#ffffff;\"=\"\" style=\"box-sizing: border-box; word-wrap: break-word; font-family: &quot;Open Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;microsoft yahei&quot;, sans-serif; line-height: 1.4; color: rgb(68, 68, 68); margin: 1em 0px 16px; font-size: 1.25em; padding: 0px; border: 0px; outline: 0px; white-space: normal; background-color: rgb(255, 255, 255);\">2、启动vim模式\n																	</h4>\n<p color:#444444;font-size:16px;background-color:#ffffff;\"=\"\" style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; padding: 0px; border: 0px; outline: 0px; font-family: &quot;Open Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;microsoft yahei&quot;, sans-serif; color: rgb(68, 68, 68); font-size: 16px; white-space: normal; background-color: rgb(255, 255, 255);\">启动非常的简单，在英文输入法下，按下ESC键，即开启了vim模式，看到编辑器上面的光标变换为vim模式的光标即设置成功了。\n																		</p>\n<h3 id=\"-\" color:#444444;font-size:1.5em;background-color:#ffffff;\"=\"\" style=\"box-sizing: border-box; word-wrap: break-word; font-family: &quot;Open Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;microsoft yahei&quot;, sans-serif; line-height: 1.43; color: rgb(68, 68, 68); margin: 1em 0px 16px; font-size: 1.5em; padding: 0px; border: 0px; outline: 0px; white-space: normal; background-color: rgb(255, 255, 255);\">后记：\n																			</h3>\n<blockquote color:#777777;background-color:#ffffff;\"=\"\" style=\"box-sizing: border-box; word-wrap: break-word; padding: 0px 15px; margin-top: 0px; margin-right: 0px; margin-left: 0px; font-size: 14px; border-width: 0px 0px 0px 4px; border-left-style: solid; border-left-color: rgb(221, 221, 221); border-top-style: initial; border-right-style: initial; border-bottom-style: initial; border-top-color: initial; border-right-color: initial; border-bottom-color: initial; border-image: initial; outline: 0px; font-family: &quot;Open Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;microsoft yahei&quot;, sans-serif; color: rgb(119, 119, 119); white-space: normal; background-color: rgb(255, 255, 255); margin-bottom: 0px !important;\">\n																			<p>\n																				vim 编辑相关的内容暂时整理了这么多，都是些基础用法，不过日常开发也基本够用了。还有很多高大上的用法没有总结到，小伙伴们可以自行去查阅，去探索更多的用法吧！\n																			</p>\n																				</blockquote>',0,1507739097,1507739209),(2,1,9,'豆瓣大砍业务线，阿北终于要认真对待赚钱这件事了','近日，豆瓣关闭了一拍一、豆瓣东西、同城票务交易和一刻在内的多个产品，其中一拍一是女性摄影O2O服务平台、豆瓣东西是导购社区、一刻是豆瓣站内内容输出App。在我印象中，在豆瓣成立十二年以来如此大刀阔斧地砍业务，还是第一次。还有消息称，豆瓣的明星产品之一豆瓣FM也将被关闭，更准确的说法是会下架所有自有曲库内容，转而链接到第三方。','<p font-size:16px;text-align:justify;background-color:#ffffff;\"=\"\" style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; padding: 0px; border: 0px; outline: 0px; font-family: &quot;Open Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;microsoft yahei&quot;, sans-serif; font-size: 16px; white-space: normal; background-color: rgb(255, 255, 255); color: rgb(51, 51, 51);\">近日，豆瓣关闭了一拍一、豆瓣东西、同城票务交易和一刻在内的多个产品，其中一拍一是女性摄影O2O服务平台、豆瓣东西是导购社区、一刻是豆瓣站内内容输出App。在我印象中，在豆瓣成立十二年以来如此大刀阔斧地砍业务，还是第一次。还有消息称，豆瓣的明星产品之一豆瓣FM也将被关闭，更准确的说法是会下架所有自有曲库内容，转而链接到第三方。\n	</p>\n<p font-size:16px;text-align:justify;background-color:#ffffff;\"=\"\" style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; padding: 0px; border: 0px; outline: 0px; font-family: &quot;Open Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;microsoft yahei&quot;, sans-serif; font-size: 16px; white-space: normal; background-color: rgb(255, 255, 255); color: rgb(51, 51, 51);\"><br />\n</p>\n<p class=\"bjh-image-caption ue_t\" font-size:16px;text-align:justify;background-color:#ffffff;\"=\"\" style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; padding: 0px; border: 0px; outline: 0px; font-family: &quot;Open Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;microsoft yahei&quot;, sans-serif; font-size: 16px; white-space: normal; background-color: rgb(255, 255, 255); color: rgb(51, 51, 51);\">阿北内部信\n	</p>\n<p class=\"pgc-img-caption\" font-size:16px;text-align:justify;background-color:#ffffff;\"=\"\" style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; padding: 0px; border: 0px; outline: 0px; font-family: &quot;Open Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;microsoft yahei&quot;, sans-serif; font-size: 16px; white-space: normal; background-color: rgb(255, 255, 255); color: rgb(51, 51, 51);\"><br />\n</p>\n<p font-size:16px;text-align:justify;background-color:#ffffff;\"=\"\" style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; padding: 0px; border: 0px; outline: 0px; font-family: &quot;Open Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;microsoft yahei&quot;, sans-serif; font-size: 16px; white-space: normal; background-color: rgb(255, 255, 255); color: rgb(51, 51, 51);\">对于这次业务调整，豆瓣官方的回应是：\n	</p>\n<blockquote text-align:justify;background-color:#ffffff;\"=\"\" style=\"box-sizing: border-box; word-wrap: break-word; padding: 0px 15px; margin: 0px 0px 16px; font-size: 17.5px; border-width: 0px 0px 0px 4px; border-left-style: solid; border-left-color: rgb(221, 221, 221); border-top-style: initial; border-right-style: initial; border-bottom-style: initial; border-top-color: initial; border-right-color: initial; border-bottom-color: initial; border-image: initial; outline: 0px; font-family: &quot;Open Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;microsoft yahei&quot;, sans-serif; color: rgb(51, 51, 51); white-space: normal; background-color: rgb(255, 255, 255);\">\n	<p>\n		“豆瓣内部在进行业务的调整，我们会关闭一些长期没有起色或在小规模营收的产品和业务，包括一拍一、豆瓣东西、同城票务交易和一刻。整个团队会更聚焦在核心的业务上。产品线主要是基于豆瓣App和用户内容的扩展；商业线主要是广告、豆瓣时间和豆瓣市集。”\n	</p>\n		</blockquote>\n<p font-size:16px;text-align:justify;background-color:#ffffff;\"=\"\" style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; padding: 0px; border: 0px; outline: 0px; font-family: &quot;Open Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;microsoft yahei&quot;, sans-serif; font-size: 16px; white-space: normal; background-color: rgb(255, 255, 255); color: rgb(51, 51, 51);\">豆瓣CEO阿北（杨勃）在关于业务调整的内部信明确，豆瓣将开启在境外上市的通道。那么，大刀阔斧地砍业务，只是为了IPO吗？\n			</p>\n<p font-size:16px;text-align:justify;background-color:#ffffff;\"=\"\" style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; padding: 0px; border: 0px; outline: 0px; font-family: &quot;Open Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;microsoft yahei&quot;, sans-serif; font-size: 16px; white-space: normal; background-color: rgb(255, 255, 255); color: rgb(51, 51, 51);\"><img src=\"https://timg01.bdimg.com/timg?pacompress&amp;imgtype=1&amp;sec=1439619614&amp;autorotate=1&amp;di=6ede54fbeead92c7d9258b09d0ed4073&amp;quality=90&amp;size=b870_10000&amp;src=http%3A%2F%2Fbos.nj.bpc.baidu.com%2Fv1%2Fmediaspot%2Ff66bbae5476553ceccc81352d00cdc51.jpeg\" class=\"\" /> \n		</p>\n<p class=\"bjh-image-caption ue_t\" font-size:16px;text-align:justify;background-color:#ffffff;\"=\"\" style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; padding: 0px; border: 0px; outline: 0px; font-family: &quot;Open Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;microsoft yahei&quot;, sans-serif; font-size: 16px; white-space: normal; background-color: rgb(255, 255, 255); color: rgb(51, 51, 51);\">豆瓣CEO 阿北\n			</p>\n<p class=\"pgc-img-caption\" font-size:16px;text-align:justify;background-color:#ffffff;\"=\"\" style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; padding: 0px; border: 0px; outline: 0px; font-family: &quot;Open Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;microsoft yahei&quot;, sans-serif; font-size: 16px; white-space: normal; background-color: rgb(255, 255, 255); color: rgb(51, 51, 51);\"><br />\n		</p>\n<p font-size:16px;text-align:justify;background-color:#ffffff;\"=\"\" style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; padding: 0px; border: 0px; outline: 0px; font-family: &quot;Open Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;microsoft yahei&quot;, sans-serif; font-size: 16px; white-space: normal; background-color: rgb(255, 255, 255); color: rgb(51, 51, 51);\"><span style=\"font-weight:700;\">豆瓣已不再是慢公司</span> \n			</p>\n<p font-size:16px;text-align:justify;background-color:#ffffff;\"=\"\" style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; padding: 0px; border: 0px; outline: 0px; font-family: &quot;Open Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;microsoft yahei&quot;, sans-serif; font-size: 16px; white-space: normal; background-color: rgb(255, 255, 255); color: rgb(51, 51, 51);\">2005年成立的豆瓣已进入第十二个年头，因为坚持特立独行的风格，曾被媒体贴上“慢公司”标签。这种慢，体现在公司规模增长、产品业务、商业化以及融资上。同期成立的网站中，大众点评与美团合并后成了超级独角兽；搜狗在引入腾讯投资后高速发展，前几天宣布将赴美IPO；豆瓣在资本上动作迟缓，上一次融资还是2011年，挚信资本、红杉资本和贝塔斯曼亚洲的5000万美元C轮融资。\n		</p>\n<p font-size:16px;text-align:justify;background-color:#ffffff;\"=\"\" style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; padding: 0px; border: 0px; outline: 0px; font-family: &quot;Open Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;microsoft yahei&quot;, sans-serif; font-size: 16px; white-space: normal; background-color: rgb(255, 255, 255); color: rgb(51, 51, 51);\">没有大规模融资、商业化较为谨慎，距离钱较远的豆瓣发展有些跟不上互联网速度。更可怕的是，巨头盯上了豆瓣的核心业务。2013年之后豆瓣的电影、图书和音乐三大块业务都迎来巨头级玩家，豆瓣只做评价，猫眼、阅文集团、腾讯们则让用户可以直接消费文化内容，再进行评价讨论，比如美团猫眼的电影评价业务，QQ音乐的“音乐号”，微信的“读书”都与豆瓣形成潜在竞争关系。\n			</p>\n<p font-size:16px;text-align:justify;background-color:#ffffff;\"=\"\" style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; padding: 0px; border: 0px; outline: 0px; font-family: &quot;Open Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;microsoft yahei&quot;, sans-serif; font-size: 16px; white-space: normal; background-color: rgb(255, 255, 255); color: rgb(51, 51, 51);\">与资源优势明显的巨头共舞，豆瓣愈发力不从心。以音乐播放器为例，QQ音乐十多年一直在储备正版内容，酷狗酷我先后被其吞并，就连网易云音乐都要向其采买分销版权，豆瓣FM即便是最早引入基于算法推荐的播放器，但却没有实力与巨头们争夺版权，下架自有曲库就成了必然。\n		</p>\n<p font-size:16px;text-align:justify;background-color:#ffffff;\"=\"\" style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; padding: 0px; border: 0px; outline: 0px; font-family: &quot;Open Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;microsoft yahei&quot;, sans-serif; font-size: 16px; white-space: normal; background-color: rgb(255, 255, 255); color: rgb(51, 51, 51);\"><img src=\"https://timg01.bdimg.com/timg?pacompress&amp;imgtype=1&amp;sec=1439619614&amp;autorotate=1&amp;di=c0b4adb406636bda4bf93d467cbca941&amp;quality=90&amp;size=b870_10000&amp;src=http%3A%2F%2Fbos.nj.bpc.baidu.com%2Fv1%2Fmediaspot%2Fa1d9fe3dd20e06d7404229fd5e6c440b.jpeg\" class=\"\" /> \n			</p>\n<p class=\"bjh-image-caption ue_t\" font-size:16px;text-align:justify;background-color:#ffffff;\"=\"\" style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; padding: 0px; border: 0px; outline: 0px; font-family: &quot;Open Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;microsoft yahei&quot;, sans-serif; font-size: 16px; white-space: normal; background-color: rgb(255, 255, 255); color: rgb(51, 51, 51);\">豆瓣FM\n		</p>\n<p class=\"pgc-img-caption\" font-size:16px;text-align:justify;background-color:#ffffff;\"=\"\" style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; padding: 0px; border: 0px; outline: 0px; font-family: &quot;Open Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;microsoft yahei&quot;, sans-serif; font-size: 16px; white-space: normal; background-color: rgb(255, 255, 255); color: rgb(51, 51, 51);\"><br />\n			</p>\n<p font-size:16px;text-align:justify;background-color:#ffffff;\"=\"\" style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; padding: 0px; border: 0px; outline: 0px; font-family: &quot;Open Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;microsoft yahei&quot;, sans-serif; font-size: 16px; white-space: normal; background-color: rgb(255, 255, 255); color: rgb(51, 51, 51);\">或许是意识到了外敌的来势汹汹，最近几年豆瓣不断向外界释放出变化信号，最早发出变革信号，可追溯到2014年。豆瓣App上线时，豆瓣CEO阿北（杨勃）在博客中表示，“豆瓣团队在多方向探索几年之后，重新回到集中、专注、快速的工作方式中”。在此之前，豆瓣采取重度垂直战略，陆续推出超过10款App，包括豆瓣电影、豆瓣音乐人、豆瓣FM等等，每一款App都不算出色，2014年豆瓣在移动端聚焦到“豆瓣”这一个App，体现出了阿北所说的集中和专注。\n		</p>\n<p font-size:16px;text-align:justify;background-color:#ffffff;\"=\"\" style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; padding: 0px; border: 0px; outline: 0px; font-family: &quot;Open Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;microsoft yahei&quot;, sans-serif; font-size: 16px; white-space: normal; background-color: rgb(255, 255, 255); color: rgb(51, 51, 51);\"><span style=\"font-weight:700;\">商业化步伐明显加快</span> \n			</p>\n<p font-size:16px;text-align:justify;background-color:#ffffff;\"=\"\" style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; padding: 0px; border: 0px; outline: 0px; font-family: &quot;Open Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;microsoft yahei&quot;, sans-serif; font-size: 16px; white-space: normal; background-color: rgb(255, 255, 255); color: rgb(51, 51, 51);\">在移动端的产品聚焦到“豆瓣App”的同时，豆瓣商业化步伐明显加快。\n		</p>\n<p font-size:16px;text-align:justify;background-color:#ffffff;\"=\"\" style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; padding: 0px; border: 0px; outline: 0px; font-family: &quot;Open Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;microsoft yahei&quot;, sans-serif; font-size: 16px; white-space: normal; background-color: rgb(255, 255, 255); color: rgb(51, 51, 51);\">在过去的十来年时间里，坐拥数亿用户的豆瓣对于商业化很警惕，收入很大部分来自图书购买分成以及品牌展示广告、互动广告，但是，谁能在豆瓣做广告，以什么形式，都是豆瓣说了算。如果广告商与豆瓣的气质不搭配，豆瓣就会Say No。对于影响用户使用豆瓣体验的动态图、Flash甚至弹出等富媒体广告，豆瓣一直抗拒，还有豆瓣曾明确，一个页面的广告不能超过一个。\n			</p>\n<p font-size:16px;text-align:justify;background-color:#ffffff;\"=\"\" style=\"box-sizing: border-box; margin-top: 0px; padding: 0px; border: 0px; outline: 0px; font-family: &quot;Open Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;microsoft yahei&quot;, sans-serif; font-size: 16px; white-space: normal; background-color: rgb(255, 255, 255); color: rgb(51, 51, 51); margin-bottom: 0px !important;\"><img src=\"https://timg01.bdimg.com/timg?pacompress&amp;imgtype=1&amp;sec=1439619614&amp;autorotate=1&amp;di=36d36beb7c1f7a2b8490cb0807701f4b&amp;quality=90&amp;size=b870_10000&amp;src=http%3A%2F%2Fbos.nj.bpc.baidu.com%2Fv1%2Fmediaspot%2F02fa50af9e82088effea59521a55a300.jpeg\" class=\"\" /> \n		</p>',0,1507739483,1507739483),(3,1,23,'Composer -- PHP依赖管理的新时代','','<p style=\"color:#505050;font-family:-apple-system, BlinkMacSystemFont, \" font-size:14px;background-color:#ffffff;\"=\"\">\n	对于现代语言而言，包管理器基本上是标配。Java 有 Maven，Python 有 pip，Ruby 有 gem，Nodejs 有 npm。PHP 的则是 <a href=\"http://pear.php.net/\">PEAR</a>，不过 PEAR 坑不少：\n	</p>\n<ul style=\"color:#505050;font-family:-apple-system, BlinkMacSystemFont, \" font-size:14px;background-color:#ffffff;\"=\"\">\n	<li>\n		依赖处理容易出问题\n	</li>\n	<li>\n		配置非常复杂\n	</li>\n	<li>\n		难用的命令行接口\n	</li>\n		</ul>\n<p style=\"color:#505050;font-family:-apple-system, BlinkMacSystemFont, \" font-size:14px;background-color:#ffffff;\"=\"\">\n	好在我们有 <a href=\"http://getcomposer.org/\">Composer</a>，PHP依赖管理的利器。它是开源的，使用起来也很简单，提交自己的包也很容易。\n			</p>\n<h2 id=\"-composer\" style=\"font-family:-apple-system, BlinkMacSystemFont, \" font-weight:400;color:#303030;font-size:2.5em;background-color:#ffffff;\"=\"\">\n	安装 Composer\n				</h2>\n<p style=\"color:#505050;font-family:-apple-system, BlinkMacSystemFont, \" font-size:14px;background-color:#ffffff;\"=\"\">\n	Composer 需要 PHP 5.3.2+ 才能运行。\n					</p>\n<pre>$ curl <span class=\"hljs-_\">-s</span>S https://getcomposer.org/installer | php</pre>\n<p style=\"color:#505050;font-family:-apple-system, BlinkMacSystemFont, \" font-size:14px;background-color:#ffffff;\"=\"\">\n	这个命令会将&nbsp;composer.phar&nbsp;下载到当前目录。PHAR（PHP 压缩包）是一个压缩格式，可以在命令行下直接运行。\n				</p>\n<p style=\"color:#505050;font-family:-apple-system, BlinkMacSystemFont, \" font-size:14px;background-color:#ffffff;\"=\"\">\n	你可以使用&nbsp;--install-dir&nbsp;选项将 Composer 安装到指定的目录，例如：\n					</p>\n<pre>$ curl <span class=\"hljs-_\">-s</span>S https://getcomposer.org/installer | php -- --install-dir=bin</pre>\n<p style=\"color:#505050;font-family:-apple-system, BlinkMacSystemFont, \" font-size:14px;background-color:#ffffff;\"=\"\">\n	当然也可以进行全局安装：\n				</p>\n<pre>$ curl <span class=\"hljs-_\">-s</span>S https://getcomposer.org/installer | php\n$ mv composer.phar /usr/<span class=\"hljs-built_in\" style=\"color:#E6DB74;\">local</span>/bin/composer</pre>\n<p style=\"color:#505050;font-family:-apple-system, BlinkMacSystemFont, \" font-size:14px;background-color:#ffffff;\"=\"\">\n	在 Mac OS X 下也可以使用 homebrew 安装：\n					</p>\n<pre>brew tap josegonzalez/homebrew-php\nbrew install josegonzalez/php/composer</pre>\n<p style=\"color:#505050;font-family:-apple-system, BlinkMacSystemFont, \" font-size:14px;background-color:#ffffff;\"=\"\">\n	不过通常情况下只需将&nbsp;composer.phar&nbsp;的位置加入到&nbsp;PATH&nbsp;环境变量就可以，不一定要全局安装。\n				</p>\n<h2 id=\"-\" style=\"font-family:-apple-system, BlinkMacSystemFont, \" font-weight:400;color:#303030;font-size:2.5em;background-color:#ffffff;\"=\"\">\n	声明依赖\n			</h2>\n<p style=\"color:#505050;font-family:-apple-system, BlinkMacSystemFont, \" font-size:14px;background-color:#ffffff;\"=\"\">\n	在项目目录下创建一个&nbsp;composer.json&nbsp;文件，指明依赖，比如，你的项目依赖 <a href=\"https://github.com/Seldaek/monolog\">monolog</a>：\n		</p>\n<pre>{ <span class=\"hljs-attr\" style=\"color:#F92672;\">\"require\"</span>: { <span class=\"hljs-attr\" style=\"color:#F92672;\">\"monolog/monolog\"</span>: <span class=\"hljs-string\" style=\"color:#E6DB74;\">\"1.2.*\"</span> }\n}</pre>\n<h2 id=\"-\" style=\"font-family:-apple-system, BlinkMacSystemFont, \" font-weight:400;color:#303030;font-size:2.5em;background-color:#ffffff;\"=\"\">\n	安装依赖\n			</h2>\n<p style=\"color:#505050;font-family:-apple-system, BlinkMacSystemFont, \" font-size:14px;background-color:#ffffff;\"=\"\">\n	安装依赖非常简单，只需在项目目录下运行：\n				</p>\n<pre>composer install</pre>\n<p style=\"color:#505050;font-family:-apple-system, BlinkMacSystemFont, \" font-size:14px;background-color:#ffffff;\"=\"\">\n	如果没有全局安装的话，则运行：\n			</p>\n<pre>php composer.phar install</pre>\n<h2 id=\"-\" style=\"font-family:-apple-system, BlinkMacSystemFont, \" font-weight:400;color:#303030;font-size:2.5em;background-color:#ffffff;\"=\"\">\n	自动加载\n		</h2>\n<p style=\"color:#505050;font-family:-apple-system, BlinkMacSystemFont, \" font-size:14px;background-color:#ffffff;\"=\"\">\n	Composer 提供了自动加载的特性，只需在你的代码的初始化部分中加入下面一行：\n			</p>\n<pre><span class=\"hljs-keyword\" style=\"color:#F92672;\">require</span> <span class=\"hljs-string\" style=\"color:#E6DB74;\">\'vendor/autoload.php\'</span>;</pre>\n<h2 id=\"-\" style=\"font-family:-apple-system, BlinkMacSystemFont, \" font-weight:400;color:#303030;font-size:2.5em;background-color:#ffffff;\"=\"\">\n	模块仓库\n				</h2>\n<p style=\"color:#505050;font-family:-apple-system, BlinkMacSystemFont, \" font-size:14px;background-color:#ffffff;\"=\"\"> <a href=\"https://packagist.org/\">packagist.org</a> 是Composer的仓库，很多著名的 PHP 库都能在其中找到。你也可以<a href=\"https://packagist.org/packages/submit\">提交你自己的作品</a>。\n					</p>\n<h2 id=\"-\" style=\"font-family:-apple-system, BlinkMacSystemFont, \" font-weight:400;color:#303030;font-size:2.5em;background-color:#ffffff;\"=\"\">\n	高级特性\n						</h2>\n<p style=\"color:#505050;font-family:-apple-system, BlinkMacSystemFont, \" font-size:14px;background-color:#ffffff;\"=\"\">\n	以上介绍了 Composer 的基本用法。Composer 还有一些<a href=\"http://www.phpcomposer.com/5-features-to-know-about-composer-php\">高级特性</a>，虽然不是必需的，但是往往能给 PHP 开发带来方便。\n							</p>\n<p style=\"color:#505050;font-family:-apple-system, BlinkMacSystemFont, \" font-size:14px;background-color:#ffffff;\"=\"\"><br />\n						</p>\n<p style=\"color:#505050;font-family:-apple-system, BlinkMacSystemFont, \" font-size:14px;background-color:#ffffff;\"=\"\"><span style=\"color:#505050;font-family:-apple-system, BlinkMacSystemFont, &quot;font-size:14px;background-color:#FFFFFF;\">原文地址：</span><a href=\"http://segmentfault.com/a/1190000000353129\">Composer PHP依赖管理的新时代</a>\n							</p>',0,1507778164,1507778212),(4,1,42,'Linux修改SSH端口和禁止root远程登陆设置','','<p style=\"color:#333333;font-family:tahoma, 宋体;font-size:14px;text-align:justify;background-color:#FAFAFC;\">\n	<span style=\"font-size:16px;\"><span style=\"font-family:Microsoft YaHei;\"></span>Linux修改ssh端口22</span><br />\n<span style=\"font-size:16px;\"> vi /etc/ssh/ssh_config</span><br />\n<span style=\"font-size:16px;\"> vi /etc/ssh/sshd_config</span> \n</p>\n<p style=\"color:#333333;font-family:tahoma, 宋体;font-size:14px;text-align:justify;background-color:#FAFAFC;\">\n	<span style=\"font-size:16px;\">然后修改为port 8888</span><br />\n<span style=\"font-size:16px;\"> 以root身份service sshd restart (</span><a href=\"http://www.linuxidc.com/topicnews.aspx?tid=10\" target=\"_blank\"><span style=\"font-size:16px;\">RedHat</span></a><span style=\"font-size:16px;\"> as3)</span><br />\n<span style=\"font-size:16px;\"> 使用putty,端口8888</span> \n</p>\n<p style=\"color:#333333;font-family:tahoma, 宋体;font-size:14px;text-align:justify;background-color:#FAFAFC;\">\n	<span style=\"font-size:16px;\">Linux下SSH默认的端口是22,为了安全考虑，现修改SSH的端口为1433,修改方法如下 ：</span> \n</p>\n<p style=\"color:#333333;font-family:tahoma, 宋体;font-size:14px;text-align:justify;background-color:#FAFAFC;\">\n	<span style=\"font-size:16px;\">/usr/sbin/sshd -p 1433</span> \n</p>\n<p style=\"color:#333333;font-family:tahoma, 宋体;font-size:14px;text-align:justify;background-color:#FAFAFC;\">\n	<span style=\"font-size:16px;\">为增强安全</span><br />\n<span style=\"font-size:16px;\"> 先增加一个普通权限的用户：</span><br />\n<span style=\"font-size:16px;\"> #useradd uploader</span><br />\n<span style=\"font-size:16px;\"> #passwd uploader</span><br />\n<span style=\"font-size:16px;\"> //设置密码</span> \n</p>\n<p style=\"color:#333333;font-family:tahoma, 宋体;font-size:14px;text-align:justify;background-color:#FAFAFC;\">\n	<span style=\"font-size:16px;\">生产机器禁止ROOT远程SSH登录：</span><br />\n<span style=\"font-size:16px;\"> #vi /etc/ssh/sshd_config</span> \n</p>\n<p style=\"color:#333333;font-family:tahoma, 宋体;font-size:14px;text-align:justify;background-color:#FAFAFC;\">\n	<span style=\"font-size:16px;\">把</span><br />\n<span style=\"font-size:16px;\"> PermitRootLogin yes</span><br />\n<span style=\"font-size:16px;\"> 改为</span><br />\n<span style=\"font-size:16px;\"> PermitRootLogin no</span><br />\n<span style=\"font-size:16px;\"> 重启sshd服务</span><br />\n<span style=\"font-size:16px;\"> #service sshd restart</span> \n</p>\n<p style=\"color:#333333;font-family:tahoma, 宋体;font-size:14px;text-align:justify;background-color:#FAFAFC;\">\n	<span style=\"font-size:16px;\">远程管理用普通用户uploader登录，然后用 su root 切换到root用户拿到最高权限。</span> \n</p>\n<p style=\"color:#333333;font-family:tahoma, 宋体;font-size:14px;text-align:justify;background-color:#FAFAFC;\">\n	<br />\n</p>\n<p style=\"color:#333333;font-family:tahoma, 宋体;font-size:14px;text-align:justify;background-color:#FAFAFC;\">\n	<span style=\"color: rgb(80, 80, 80); font-size: 16px;\" font-size:16px;background-color:#ffffff;\"=\"\">原文地址：</span><a href=\"http://www.linuxidc.com/Linux/2011-12/50307.htm\" target=\"_blank\"><span style=\"font-size:16px;\">Linux修改SSH端口和禁止root远程登陆设置</span></a> \n</p>',0,1507886886,1507886977),(5,1,42,'只要一小时，零基础入门Docker','Docker是什么？\nDocker是一个虚拟环境容器，可以将你的开发环境、代码、配置文件等一并打包到这个容器中，并发布和应用到任意平台中。比如，你在本地用Python开发网站后台，开发测试完成后，就可以将Python3及其依赖包、Flask及其各种插件、Mysql、Nginx等打包到一个容器中，然后部署到任意你想部署到的环境。','<p>\n	<br />\n</p>\n<p>\n	<br />\n</p>\n<p>\n	<img src=\"/public/plugin/kindeditor/attached/image/20171013/20171013114516_12026.png\" alt=\"\" /> \n</p>\n<p>\n	<span style=\"color: rgb(51, 51, 51); font-size: 16px; font-family: &quot;Microsoft YaHei&quot;;\" font-size:medium;background-color:#ffffff;\"=\"\">Docker是什么？</span> \n</p>\n<p>\n	<span style=\"color: rgb(51, 51, 51); font-size: 16px; font-family: &quot;Microsoft YaHei&quot;;\" font-size:medium;background-color:#ffffff;\"=\"\">Docker是一个虚拟环境容器，可以将你的开发环境、代码、配置文件等一并打包到这个容器中，并发布和应用到任意平台中。比如，你在本地用Python开发网站后台，开发测试完成后，就可以将Python3及其依赖包、Flask及其各种插件、Mysql、Nginx等打包到一个容器中，然后部署到任意你想部署到的环境。</span> \n</p>\n<p>\n	<span style=\"font-size:14px;\"></span> \n</p>\n<p>\n	<span style=\"font-size:16px;font-family:&quot;\">Docker官方文档比较全，建议有能力的读一下</span><a href=\"http://link.zhihu.com/?target=https%3A/docs.docker.com/\" class=\" wrap external\" target=\"_blank\"><span style=\"font-size:16px;font-family:&quot;\">官方文档</span><span class=\"icon-external\" style=\"font-size:24px;line-height:1;font-family:icomoon !important;\"></span></a><span style=\"font-size:16px;font-family:&quot;\">。</span> \n</p>\n<br />\n<h2 style=\"font-style:inherit;font-size:24px;font-family:inherit;\">\n	<span style=\"font-size:16px;font-family:&quot;\">Docker的三个概念</span> \n</h2>\n<ol>\n	<li>\n		<span style=\"font-size:16px;font-family:&quot;\">镜像（Image）：类似于虚拟机中的镜像，是一个包含有文件系统的面向Docker引擎的只读模板。任何应用程序运行都需要环境，而镜像就是用来提供这种运行环境的。例如一个Ubuntu镜像就是一个包含Ubuntu操作系统环境的模板，同理在该镜像上装上Apache软件，就可以称为Apache镜像。</span> \n	</li>\n	<li>\n		<span style=\"font-size:16px;font-family:&quot;\">容器（Container）：类似于一个轻量级的沙盒，可以将其看作一个极简的Linux系统环境（包括root权限、进程空间、用户空间和网络空间等），以及运行在其中的应用程序。Docker引擎利用容器来运行、隔离各个应用。容器是镜像创建的应用实例，可以创建、启动、停止、删除容器，各个容器之间是是相互隔离的，互不影响。注意：镜像本身是只读的，容器从镜像启动时，Docker在镜像的上层创建一个可写层，镜像本身不变。</span> \n	</li>\n	<li>\n		<span style=\"font-size:16px;font-family:&quot;\">仓库（Repository）：类似于代码仓库，这里是镜像仓库，是Docker用来集中存放镜像文件的地方。注意与注册服务器（Registry）的区别：注册服务器是存放仓库的地方，一般会有多个仓库；而仓库是存放镜像的地方，一般每个仓库存放一类镜像，每个镜像利用tag进行区分，比如Ubuntu仓库存放有多个版本（12.04、14.04等）的Ubuntu镜像。</span> \n	</li>\n</ol>\n<br />\n<h2 style=\"font-style:inherit;font-size:24px;font-family:inherit;\">\n	<span style=\"font-size:16px;font-family:&quot;\">Docker的安装和卸载</span> \n</h2>\n<p>\n	<span style=\"font-size:16px;font-family:&quot;\">Docker可以安装在Windows、Linux、Mac等各个平台上。具体可以查看文档</span><a href=\"http://link.zhihu.com/?target=https%3A/docs.docker.com/engine/installation/\" class=\" wrap external\" target=\"_blank\"><span style=\"font-size:16px;font-family:&quot;\">Install Docker</span><span class=\"icon-external\" style=\"font-size:24px;line-height:1;font-family:icomoon !important;\"></span></a><span style=\"font-size:16px;font-family:&quot;\">。安装完成之后，可以查看Docker的版本信息：</span> \n</p>\n<div class=\"highlight\">\n<pre><span></span>[root@xxx ~]# docker version\nClient:\n Version:      1.12.3\n API version:  1.24\n Go version:   go1.6.3\n Git commit:   6b644ec\n Built:\n OS/Arch:      linux/amd64\n\nServer:\n Version:      1.12.3\n API version:  1.24\n Go version:   go1.6.3\n Git commit:   6b644ec\n Built:\n OS/Arch:      linux/amd64</pre>\n</div>\n<p>\n	<span style=\"font-size:16px;font-family:&quot;\">查看Docker的帮助信息：# docker --help。各种命令的用法也不再赘述，后边用到哪些命令时会作出一定的解释。</span> \n</p>\n<br />\n<h2 style=\"font-style:inherit;font-size:24px;font-family:inherit;\">\n	<span style=\"font-size:16px;font-family:&quot;\">Docker中关于镜像的基本操作</span> \n</h2>\n<p>\n	<span style=\"font-size:16px;font-family:&quot;\">安装完Docker引擎之后，就可以对镜像进行基本的操作了。</span> \n</p>\n<p>\n	<span style=\"font-size:16px;font-family:&quot;\">我们从官方注册服务器（</span><a href=\"http://link.zhihu.com/?target=https%3A/hub.docker.com\" class=\" external\" target=\"_blank\"><span class=\"invisible\" style=\"font-size:16px;line-height:0;font-family:&quot;color:transparent;background-color:transparent;\">https://</span><span class=\"visible\" style=\"font-size:16px;font-family:&quot;\">hub.docker.com</span><span class=\"invisible\" style=\"font-size:0px;line-height:0;font-family:a;color:transparent;background-color:transparent;\"></span><span class=\"icon-external\" style=\"font-size:24px;line-height:1;font-family:icomoon !important;\"></span></a><span style=\"font-size:16px;font-family:&quot;\">）的仓库中pull下CentOS的镜像，前边说过，每个仓库会有多个镜像，用tag标示，如果不加tag，默认使用latest镜像：</span> \n</p>\n<div class=\"highlight\">\n<pre><span></span>[root@xxx ~]# docker search centos    # 查看centos镜像是否存在\n[root@xxx ~]# docker pull centos    # 利用pull命令获取镜像\nUsing default tag: latest\nlatest: Pulling from library/centos\n08d48e6f1cff: Pull complete\nDigest: sha256:b2f9d1c0ff5f87a4743104d099a3d561002ac500db1b9bfa02a783a46e0d366c\nStatus: Downloaded newer image for centos:latest\n\n[root@xxx ~]# docker images    # 查看当前系统中的images信息\nREPOSITORY      TAG            IMAGE ID       CREATED        SIZE\ncentos          latest         0584b3d2cf6d   9 days ago     196.5 MB</pre>\n</div>\n<p>\n	<span style=\"font-size:16px;font-family:&quot;\">以上是下载一个已有镜像，此外有两种方法可以帮助你新建自有镜像。</span> \n</p>\n<p>\n	<span style=\"font-size:16px;font-family:&quot;\">（1）利用镜像启动一个容器后进行修改 ==&gt; 利用commit提交更新后的副本</span> \n</p>\n<div class=\"highlight\">\n<pre><span></span>[root@xxx ~]# docker run -it centos:latest /bin/bash    # 启动一个容器\n[root@72f1a8a0e394 /]#    # 这里命令行形式变了，表示已经进入了一个新环境\n[root@72f1a8a0e394 /]# git --version    # 此时的容器中没有git\nbash: git: command not found\n[root@72f1a8a0e394 /]# yum install git    # 利用yum安装git\n......\n[root@72f1a8a0e394 /]# git --version   # 此时的容器中已经装有git了\ngit version 1.8.3.1</pre>\n</div>\n<p>\n	<span style=\"font-size:16px;font-family:&quot;\">此时利用exit退出该容器，然后查看docker中运行的程序（容器）：</span> \n</p>\n<div class=\"highlight\">\n<pre><span></span>[root@xxx ~]# docker ps -a\nCONTAINER ID  IMAGE    COMMAND      CREATED   STATUS   PORTS    NAMES\n72f1a8a0e394  centos:latest \"/bin/bash\"  9 minutes ago   Exited (0) 3 minutes ago      angry_hodgkin</pre>\n</div>\n<p>\n	<span style=\"font-size:16px;font-family:&quot;\">这里将容器转化为一个镜像，即执行commit操作，完成后可使用docker images查看：</span> \n</p>\n<div class=\"highlight\">\n<pre><span></span>[root@xxx ~]# docker commit -m \"centos with git\" -a \"qixianhu\" 72f1a8a0e394 xianhu/centos:git\n\n[root@xxx ~]# docker images\nREPOSITORY       TAG    IMAGE ID         CREATED             SIZE\nxianhu/centos    git    52166e4475ed     5 seconds ago       358.1 MB\ncentos           latest 0584b3d2cf6d     9 days ago          196.5 MB</pre>\n</div>\n<p>\n	<span style=\"font-size:16px;font-family:&quot;\">其中，-m指定说明信息；-a指定用户信息；72f1a8a0e394代表容器的id；xianhu/centos:git指定目标镜像的用户名、仓库名和 tag 信息。注意这里的用户名xianhu，后边会用到。</span> \n</p>\n<p>\n	<span style=\"font-size:16px;font-family:&quot;\">此时Docker引擎中就有了我们新建的镜像xianhu/centos:git，此镜像和原有的CentOS镜像区别在于多了个Git工具。此时我们利用新镜像创建的容器，本身就自带git了。</span> \n</p>\n<div class=\"highlight\">\n<pre><span></span>[root@xxx ~]# docker run -it xianhu/centos:git /bin/bash\n[root@520afc596c51 /]# git --version\ngit version 1.8.3.1</pre>\n</div>\n<p>\n	<span style=\"font-size:16px;font-family:&quot;\">利用exit退出容器。注意此时Docker引擎中就有了两个容器，可使用docker ps -a查看。</span> \n</p>\n<p>\n	<span style=\"font-size:16px;font-family:&quot;\">（2）利用Dockerfile创建镜像</span> \n</p>\n<p>\n	<span style=\"font-size:16px;font-family:&quot;\">Dockerfile可以理解为一种配置文件，用来告诉docker build命令应该执行哪些操作。一个简易的Dockerfile文件如下所示，官方说明：</span><a href=\"http://link.zhihu.com/?target=https%3A/docs.docker.com/engine/reference/builder/\" class=\" wrap external\" target=\"_blank\"><span style=\"font-size:16px;font-family:&quot;\">Dockerfile reference</span><span class=\"icon-external\" style=\"font-size:24px;line-height:1;font-family:icomoon !important;\"></span></a><span style=\"font-size:16px;font-family:&quot;\">：</span> \n</p>\n<div class=\"highlight\">\n<pre><span></span># 说明该镜像以哪个镜像为基础\nFROM centos:latest\n\n# 构建者的基本信息\nMAINTAINER xianhu\n\n# 在build这个镜像时执行的操作\nRUN yum update\nRUN yum install -y git\n\n# 拷贝本地文件到镜像中\nCOPY ./* /usr/share/gitdir/</pre>\n</div>\n<p>\n	<span style=\"font-size:16px;font-family:&quot;\">有了Dockerfile之后，就可以利用build命令构建镜像了：</span> \n</p>\n<div class=\"highlight\">\n<pre><span></span>[root@xxx ~]# docker build -t=\"xianhu/centos:gitdir\" .</pre>\n</div>\n<p>\n	<span style=\"font-size:16px;font-family:&quot;\">其中-t用来指定新镜像的用户信息、tag等。最后的点表示在当前目录寻找Dockerfile。</span> \n</p>\n<p>\n	<span style=\"font-size:16px;font-family:&quot;\">构建完成之后，同样可以使用docker images命令查看：</span> \n</p>\n<div class=\"highlight\">\n<pre><span></span>[root@xxx ~]# docker images\nREPOSITORY        TAG       IMAGE ID      CREATED            SIZE\nxianhu/centos     gitdir    0749ecbca587  34 minutes ago     359.7 MB\nxianhu/centos     git       52166e4475ed  About an hour ago  358.1 MB\ncentos            latest    0584b3d2cf6d  9 days ago         196.5 MB</pre>\n</div>\n<p>\n	<span style=\"font-size:16px;font-family:&quot;\">以上就是构建自己镜像的两种方法。其中也涉及到了容器的一些操作。如果想删除容器或者镜像，可以使用rm命令，注意：删除镜像前必须先删除以此镜像为基础的容器。</span> \n</p>\n<div class=\"highlight\">\n<pre><span></span>[root@xxx ~]# docker rm container_name/container_id\n[root@xxx ~]# docker rmi image_name/image_id</pre>\n</div>\n<p>\n	<span style=\"font-size:16px;font-family:&quot;\">镜像其他操作指令：</span> \n</p>\n<div class=\"highlight\">\n<pre><span></span>[root@xxx ~]# docker save -o centos.tar xianhu/centos:git    # 保存镜像, -o也可以是--output\n[root@xxx ~]# docker load -i centos.tar    # 加载镜像, -i也可以是--input</pre>\n</div>\n<br />\n<h2 style=\"font-style:inherit;font-size:24px;font-family:inherit;\">\n	<span style=\"font-size:16px;font-family:&quot;\">Docker中关于容器的基本操作</span> \n</h2>\n<span style=\"font-size:16px;font-family:&quot;\">在前边镜像的章节中，我们已经看到了如何基于镜像启动一个容器，即docker run操作。</span> \n<div class=\"highlight\">\n<pre><span></span>[root@xxx ~]# docker run -it centos:latest /bin/bash</pre>\n</div>\n<p>\n	<span style=\"font-size:16px;font-family:&quot;\">这里-it是两个参数：-i和-t。前者表示打开并保持stdout，后者表示分配一个终端（pseudo-tty）。此时如果使用exit退出，则容器的状态处于Exit，而不是后台运行。如果想让容器一直运行，而不是停止，可以使用快捷键 ctrl+p ctrl+q 退出，此时容器的状态为Up。</span> \n</p>\n<p>\n	<span style=\"font-size:16px;font-family:&quot;\">除了这两个参数之外，run命令还有很多其他参数。其中比较有用的是-d后台运行：</span> \n</p>\n<div class=\"highlight\">\n<pre><span></span>[root@xxx ~]# docker run centos:latest /bin/bash -c \"while true; do echo hello; sleep 1; done\"\n[root@xxx ~]# docker run -d centos:latest /bin/bash -c \"while true; do echo hello; sleep 1; done\"</pre>\n</div>\n<p>\n	<span style=\"font-size:16px;font-family:&quot;\">这里第二条命令使用了-d参数，使这个容器处于后台运行的状态，不会对当前终端产生任何输出，所有的stdout都输出到log，可以使用docker logs container_name/container_id查看。</span> \n</p>\n<p>\n	<span style=\"font-size:16px;font-family:&quot;\">启动、停止、重启容器命令：</span> \n</p>\n<div class=\"highlight\">\n<pre><span></span>[root@xxx ~]# docker start container_name/container_id\n[root@xxx ~]# docker stop container_name/container_id\n[root@xxx ~]# docker restart container_name/container_id</pre>\n</div>\n<p>\n	<span style=\"font-size:16px;font-family:&quot;\">后台启动一个容器后，如果想进入到这个容器，可以使用attach命令：</span> \n</p>\n<div class=\"highlight\">\n<pre><span></span>[root@xxx ~]# docker attach container_name/container_id</pre>\n</div>\n<p>\n	<span style=\"font-size:16px;font-family:&quot;\">删除容器的命令前边已经提到过了：</span> \n</p>\n<div class=\"highlight\">\n<pre><span></span>[root@xxx ~]# docker rm container_name/container_id</pre>\n</div>\n<br />\n<h2 style=\"font-style:inherit;font-size:24px;font-family:inherit;\">\n	<span style=\"font-size:16px;font-family:&quot;\">Docker中关于仓库的基本操作</span> \n</h2>\n<p>\n	<span style=\"font-size:16px;font-family:&quot;\">Docker官方维护了一个DockerHub的公共仓库，里边包含有很多平时用的较多的镜像。除了从上边下载镜像之外，我们也可以将自己自定义的镜像发布（push）到DockerHub上。</span> \n</p>\n<p>\n	<span style=\"font-size:16px;font-family:&quot;\">在镜像操作章节中，我们新建了一个xianhu/centos:git镜像。</span> \n</p>\n<p>\n	<span style=\"font-size:16px;font-family:&quot;\">（1）访问</span><a href=\"http://link.zhihu.com/?target=https%3A/hub.docker.com/\" class=\" external\" target=\"_blank\"><span class=\"invisible\" style=\"font-size:16px;line-height:0;font-family:&quot;color:transparent;background-color:transparent;\">https://</span><span class=\"visible\" style=\"font-size:16px;font-family:&quot;\">hub.docker.com/</span><span class=\"invisible\" style=\"font-size:0px;line-height:0;font-family:a;color:transparent;background-color:transparent;\"></span><span class=\"icon-external\" style=\"font-size:24px;line-height:1;font-family:icomoon !important;\"></span></a><span style=\"font-size:16px;font-family:&quot;\">，如果没有账号，需要先注册一个。</span> \n</p>\n<p>\n	<span style=\"font-size:16px;font-family:&quot;\">（2）利用命令docker login登录DockerHub，输入用户名、密码即可登录成功：</span> \n</p>\n<div class=\"highlight\">\n<pre><span></span>[root@xxx ~]# docker login\nLogin with your Docker ID to push and pull images from Docker Hub. If you don\'t have a Docker ID, head over to https://hub.docker.com to create one.\nUsername: xianhu\nPassword:\nLogin Succeeded</pre>\n</div>\n<p>\n	<span style=\"font-size:16px;font-family:&quot;\">（3）将本地的镜像推送到DockerHub上，这里的xianhu要和登录时的username一致：</span> \n</p>\n<div class=\"highlight\">\n<pre><span></span>[root@xxx ~]# docker push xianhu/centos:git    # 成功推送\n[root@xxx ~]# docker push xxx/centos:git    # 失败\nThe push refers to a repository [docker.io/xxx/centos]\nunauthorized: authentication required</pre>\n</div>\n<p>\n	<span style=\"font-size:16px;font-family:&quot;\">（4）以后别人就可以从你的仓库中下载合适的镜像了。</span> \n</p>\n<div class=\"highlight\">\n<pre><span></span>[root@xxx ~]# docker pull xianhu/centos:git</pre>\n</div>\n<p>\n	<span style=\"font-size:16px;font-family:&quot;\">对应于镜像的两种创建方法，镜像的更新也有两种：</span> \n</p>\n<ul>\n	<li>\n		<span style=\"font-size:16px;font-family:&quot;\">创建容器之后做更改，之后commit生成镜像，然后push到仓库中。</span> \n	</li>\n	<li>\n		<span style=\"font-size:16px;font-family:&quot;\">更新Dockerfile。在工作时一般建议这种方式，更简洁明了。</span> \n	</li>\n</ul>\n<span style=\"font-size:16px;font-family:&quot;\">这里再一次回顾一下三个重要的概念：镜像、容器、仓库：</span> \n<blockquote>\n	<span style=\"font-size:16px;font-family:&quot;\">从仓库（一般为DockerHub）下载（pull）一个镜像，Docker执行run方法得到一个容器，用户在容器里执行各种操作。Docker执行commit方法将一个容器转化为镜像。Docker利用login、push等命令将本地镜像推送（push）到仓库。其他机器或服务器上就可以使用该镜像去生成容器，进而运行相应的应用程序了。</span> \n</blockquote>\n<br />\n<h2 style=\"font-style:inherit;font-size:24px;font-family:inherit;\">\n	<span style=\"font-size:16px;font-family:&quot;\">利用Docker创建一个用于Flask开发的Python环境</span> \n</h2>\n<p>\n	<span style=\"font-size:16px;font-family:&quot;\">上边已经解释和练习了Docker的基本操作命令，下边以实例的形式完整走一遍流程。</span> \n</p>\n<p>\n	<span style=\"font-size:16px;font-family:&quot;\">我们创建一个用于Flask开发的Python环境，包含Git、Python3、Flask以及其他依赖包等。</span> \n</p>\n<p>\n	<span style=\"font-size:16px;font-family:&quot;\">完整命令如下：</span> \n</p>\n<div class=\"highlight\">\n<pre><span></span>[root@xxx ~]# docker pull centos\n[root@xxx ~]# docker run -it centos:latest /bin/bash\n# 此时进入容器，安装Python3、Git、Flask及其依赖包等，安装完成后exit退出\n[root@xxx ~]# docker commit -m \"Flask\" -a \"xianhu\" container_id xianhu/flask:v1\n[root@xxx ~]# docker push xianhu/flask:v1</pre>\n</div>\n<span style=\"font-family:Microsoft YaHei;\"></span><br />\n<p>\n	<span style=\"font-size:16px;font-family:&quot;\">Docker的功能和特性还有很多，各种运行命令、参数等也都有待学习和练习，比如如何管理数据、如何管理网络、如何互相配合工作、如何编写更专业的Dockerfile等。本文先入门为主，以后有时间再慢慢更新关于Docker的知识。</span> \n</p>\n<p>\n	<br />\n</p>\n<p>\n	<span style=\"font-size:16px;font-family:&quot;\">原文地址：</span><span style=\"font-family:-apple-system, \" color:#333333;background-color:#ffffff;font-size:14px;\"=\"\"><a href=\"https://zhuanlan.zhihu.com/p/23599229\" target=\"_blank\"><span style=\"font-size:16px;font-family:&quot;\">只要一小时，零基础入门Docker</span></a></span> \n</p>\n<p>\n	<br />\n</p>\n<p>\n	<br />\n</p>\n<p>\n	<br />\n</p>',0,1507895233,1507895482),(6,1,9,'理解OAuth 2.0','','<p style=\"margin-left:0.8em;\">\n	<a href=\"http://en.wikipedia.org/wiki/OAuth\" target=\"_blank\">OAuth</a>是一个关于授权（authorization）的开放网络标准，在全世界得到广泛应用，目前的版本是2.0版。\n</p>\n<p style=\"margin-left:0.8em;\">\n	本文对OAuth 2.0的设计思路和运行流程，做一个简明通俗的解释，主要参考材料为<a href=\"http://www.rfcreader.com/#rfc6749\" target=\"_blank\">RFC 6749</a>。\n</p>\n<p style=\"margin-left:0.8em;\">\n	<img src=\"/public/plugin/kindeditor/attached/image/20180327/20180327032228_72908.png\" alt=\"\" />\n</p>\n<h2>\n	一、应用场景\n</h2>\n<p style=\"margin-left:0.8em;\">\n	为了理解OAuth的适用场合，让我举一个假设的例子。\n</p>\n<p style=\"margin-left:0.8em;\">\n	有一个\"云冲印\"的网站，可以将用户储存在Google的照片，冲印出来。用户为了使用该服务，必须让\"云冲印\"读取自己储存在Google上的照片。\n</p>\n<p style=\"margin-left:0.8em;\">\n	<img src=\"http://www.ruanyifeng.com/blogimg/asset/2014/bg2014051202.png\" width=\"300\" height=\"300\" alt=\"\" /> \n</p>\n<p style=\"margin-left:0.8em;\">\n	问题是只有得到用户的授权，Google才会同意\"云冲印\"读取这些照片。那么，\"云冲印\"怎样获得用户的授权呢？\n</p>\n<p style=\"margin-left:0.8em;\">\n	传统方法是，用户将自己的Google用户名和密码，告诉\"云冲印\"，后者就可以读取用户的照片了。这样的做法有以下几个严重的缺点。\n</p>\n<blockquote>\n	<p style=\"margin-left:0.8em;\">\n		（1）\"云冲印\"为了后续的服务，会保存用户的密码，这样很不安全。\n	</p>\n	<p style=\"margin-left:0.8em;\">\n		（2）Google不得不部署密码登录，而我们知道，单纯的密码登录并不安全。\n	</p>\n	<p style=\"margin-left:0.8em;\">\n		（3）\"云冲印\"拥有了获取用户储存在Google所有资料的权力，用户没法限制\"云冲印\"获得授权的范围和有效期。\n	</p>\n	<p style=\"margin-left:0.8em;\">\n		（4）用户只有修改密码，才能收回赋予\"云冲印\"的权力。但是这样做，会使得其他所有获得用户授权的第三方应用程序全部失效。\n	</p>\n	<p style=\"margin-left:0.8em;\">\n		（5）只要有一个第三方应用程序被破解，就会导致用户密码泄漏，以及所有被密码保护的数据泄漏。\n	</p>\n</blockquote>\n<p style=\"margin-left:0.8em;\">\n	OAuth就是为了解决上面这些问题而诞生的。\n</p>\n<h2>\n	二、名词定义\n</h2>\n<p style=\"margin-left:0.8em;\">\n	在详细讲解OAuth 2.0之前，需要了解几个专用名词。它们对读懂后面的讲解，尤其是几张图，至关重要。\n</p>\n<blockquote>\n	<p style=\"margin-left:0.8em;\">\n		（1） Third-party application：第三方应用程序，本文中又称\"客户端\"（client），即上一节例子中的\"云冲印\"。\n	</p>\n	<p style=\"margin-left:0.8em;\">\n		（2）HTTP service：HTTP服务提供商，本文中简称\"服务提供商\"，即上一节例子中的Google。\n	</p>\n	<p style=\"margin-left:0.8em;\">\n		（3）Resource Owner：资源所有者，本文中又称\"用户\"（user）。\n	</p>\n	<p style=\"margin-left:0.8em;\">\n		（4）User Agent：用户代理，本文中就是指浏览器。\n	</p>\n	<p style=\"margin-left:0.8em;\">\n		（5）Authorization server：认证服务器，即服务提供商专门用来处理认证的服务器。\n	</p>\n	<p style=\"margin-left:0.8em;\">\n		（6）Resource server：资源服务器，即服务提供商存放用户生成的资源的服务器。它与认证服务器，可以是同一台服务器，也可以是不同的服务器。\n	</p>\n</blockquote>\n<p style=\"margin-left:0.8em;\">\n	知道了上面这些名词，就不难理解，OAuth的作用就是让\"客户端\"安全可控地获取\"用户\"的授权，与\"服务商提供商\"进行互动。\n</p>\n<h2>\n	三、OAuth的思路\n</h2>\n<p style=\"margin-left:0.8em;\">\n	OAuth在\"客户端\"与\"服务提供商\"之间，设置了一个授权层（authorization layer）。\"客户端\"不能直接登录\"服务提供商\"，只能登录授权层，以此将用户与客户端区分开来。\"客户端\"登录授权层所用的令牌（token），与用户的密码不同。用户可以在登录的时候，指定授权层令牌的权限范围和有效期。\n</p>\n<p style=\"margin-left:0.8em;\">\n	\"客户端\"登录授权层以后，\"服务提供商\"根据令牌的权限范围和有效期，向\"客户端\"开放用户储存的资料。\n</p>\n<h2>\n	四、运行流程\n</h2>\n<p style=\"margin-left:0.8em;\">\n	OAuth 2.0的运行流程如下图，摘自RFC 6749。\n</p>\n<p style=\"margin-left:0.8em;\">\n	<img src=\"http://www.ruanyifeng.com/blogimg/asset/2014/bg2014051203.png\" alt=\"\" title=\"\" width=\"766\" height=\"411\" align=\"\" /> \n</p>\n<blockquote>\n	<p style=\"margin-left:0.8em;\">\n		（A）用户打开客户端以后，客户端要求用户给予授权。\n	</p>\n	<p style=\"margin-left:0.8em;\">\n		（B）用户同意给予客户端授权。\n	</p>\n	<p style=\"margin-left:0.8em;\">\n		（C）客户端使用上一步获得的授权，向认证服务器申请令牌。\n	</p>\n	<p style=\"margin-left:0.8em;\">\n		（D）认证服务器对客户端进行认证以后，确认无误，同意发放令牌。\n	</p>\n	<p style=\"margin-left:0.8em;\">\n		（E）客户端使用令牌，向资源服务器申请获取资源。\n	</p>\n	<p style=\"margin-left:0.8em;\">\n		（F）资源服务器确认令牌无误，同意向客户端开放资源。\n	</p>\n</blockquote>\n<p style=\"margin-left:0.8em;\">\n	不难看出来，上面六个步骤之中，B是关键，即用户怎样才能给于客户端授权。有了这个授权以后，客户端就可以获取令牌，进而凭令牌获取资源。\n</p>\n<p style=\"margin-left:0.8em;\">\n	下面一一讲解客户端获取授权的四种模式。\n</p>\n<h2>\n	五、客户端的授权模式\n</h2>\n<p style=\"margin-left:0.8em;\">\n	客户端必须得到用户的授权（authorization grant），才能获得令牌（access token）。OAuth 2.0定义了四种授权方式。\n</p>\n<ul>\n	<li style=\"text-align:left;\">\n		授权码模式（authorization code）\n	</li>\n	<li style=\"text-align:left;\">\n		简化模式（implicit）\n	</li>\n	<li style=\"text-align:left;\">\n		密码模式（resource owner password credentials）\n	</li>\n	<li style=\"text-align:left;\">\n		客户端模式（client credentials）\n	</li>\n</ul>\n<h2>\n	六、授权码模式\n</h2>\n<p style=\"margin-left:0.8em;\">\n	授权码模式（authorization code）是功能最完整、流程最严密的授权模式。它的特点就是通过客户端的后台服务器，与\"服务提供商\"的认证服务器进行互动。\n</p>\n<p style=\"margin-left:0.8em;\">\n	<img src=\"http://www.ruanyifeng.com/blogimg/asset/2014/bg2014051204.png\" alt=\"\" title=\"\" width=\"764\" height=\"529\" align=\"\" /> \n</p>\n<p style=\"margin-left:0.8em;\">\n	它的步骤如下：\n</p>\n<blockquote>\n	<p style=\"margin-left:0.8em;\">\n		（A）用户访问客户端，后者将前者导向认证服务器。\n	</p>\n	<p style=\"margin-left:0.8em;\">\n		（B）用户选择是否给予客户端授权。\n	</p>\n	<p style=\"margin-left:0.8em;\">\n		（C）假设用户给予授权，认证服务器将用户导向客户端事先指定的\"重定向URI\"（redirection URI），同时附上一个授权码。\n	</p>\n	<p style=\"margin-left:0.8em;\">\n		（D）客户端收到授权码，附上早先的\"重定向URI\"，向认证服务器申请令牌。这一步是在客户端的后台的服务器上完成的，对用户不可见。\n	</p>\n	<p style=\"margin-left:0.8em;\">\n		（E）认证服务器核对了授权码和重定向URI，确认无误后，向客户端发送访问令牌（access token）和更新令牌（refresh token）。\n	</p>\n</blockquote>\n<p style=\"margin-left:0.8em;\">\n	下面是上面这些步骤所需要的参数。\n</p>\n<p style=\"margin-left:0.8em;\">\n	A步骤中，客户端申请认证的URI，包含以下参数：\n</p>\n<ul>\n	<li style=\"text-align:left;\">\n		response_type：表示授权类型，必选项，此处的值固定为\"code\"\n	</li>\n	<li style=\"text-align:left;\">\n		client_id：表示客户端的ID，必选项\n	</li>\n	<li style=\"text-align:left;\">\n		redirect_uri：表示重定向URI，可选项\n	</li>\n	<li style=\"text-align:left;\">\n		scope：表示申请的权限范围，可选项\n	</li>\n	<li style=\"text-align:left;\">\n		state：表示客户端的当前状态，可以指定任意值，认证服务器会原封不动地返回这个值。\n	</li>\n</ul>\n<p style=\"margin-left:0.8em;\">\n	下面是一个例子。\n</p>\n<blockquote>\n<pre class=\" language-http\">GET /authorize?response_type=code&amp;client_id=s6BhdRkqt3&amp;state=xyz\n        &amp;redirect_uri=https%3A%2F%2Fclient%2Eexample%2Ecom%2Fcb HTTP/1.1 Host: server.example.com</pre>\n</blockquote>\n<p style=\"margin-left:0.8em;\">\n	C步骤中，服务器回应客户端的URI，包含以下参数：\n</p>\n<ul>\n	<li style=\"text-align:left;\">\n		code：表示授权码，必选项。该码的有效期应该很短，通常设为10分钟，客户端只能使用该码一次，否则会被授权服务器拒绝。该码与客户端ID和重定向URI，是一一对应关系。\n	</li>\n	<li style=\"text-align:left;\">\n		state：如果客户端的请求中包含这个参数，认证服务器的回应也必须一模一样包含这个参数。\n	</li>\n</ul>\n<p style=\"margin-left:0.8em;\">\n	下面是一个例子。\n</p>\n<blockquote>\n<pre class=\" language-http\">HTTP/1.1 302 Found Location: <a class=\"token url-link\" href=\"https://client.example.com/cb\">https://client.example.com/cb</a>?code=SplxlOBeZQQYbYS6WxSbIA\n          &amp;state=xyz</pre>\n</blockquote>\n<p style=\"margin-left:0.8em;\">\n	D步骤中，客户端向认证服务器申请令牌的HTTP请求，包含以下参数：\n</p>\n<ul>\n	<li style=\"text-align:left;\">\n		grant_type：表示使用的授权模式，必选项，此处的值固定为\"authorization_code\"。\n	</li>\n	<li style=\"text-align:left;\">\n		code：表示上一步获得的授权码，必选项。\n	</li>\n	<li style=\"text-align:left;\">\n		redirect_uri：表示重定向URI，必选项，且必须与A步骤中的该参数值保持一致。\n	</li>\n	<li style=\"text-align:left;\">\n		client_id：表示客户端ID，必选项。\n	</li>\n</ul>\n<p style=\"margin-left:0.8em;\">\n	下面是一个例子。\n</p>\n<blockquote>\n<pre class=\" language-http\">POST /token HTTP/1.1 Host: server.example.com Authorization: Basic czZCaGRSa3F0MzpnWDFmQmF0M2JW Content-Type: application/x-www-form-urlencoded\n\ngrant_type=authorization_code&amp;code=SplxlOBeZQQYbYS6WxSbIA\n&amp;redirect_uri=https%3A%2F%2Fclient%2Eexample%2Ecom%2Fcb</pre>\n</blockquote>\n<p style=\"margin-left:0.8em;\">\n	E步骤中，认证服务器发送的HTTP回复，包含以下参数：\n</p>\n<ul>\n	<li style=\"text-align:left;\">\n		access_token：表示访问令牌，必选项。\n	</li>\n	<li style=\"text-align:left;\">\n		token_type：表示令牌类型，该值大小写不敏感，必选项，可以是bearer类型或mac类型。\n	</li>\n	<li style=\"text-align:left;\">\n		expires_in：表示过期时间，单位为秒。如果省略该参数，必须其他方式设置过期时间。\n	</li>\n	<li style=\"text-align:left;\">\n		refresh_token：表示更新令牌，用来获取下一次的访问令牌，可选项。\n	</li>\n	<li style=\"text-align:left;\">\n		scope：表示权限范围，如果与客户端申请的范围一致，此项可省略。\n	</li>\n</ul>\n<p style=\"margin-left:0.8em;\">\n	下面是一个例子。\n</p>\n<blockquote>\n<pre class=\" language-http\">HTTP/1.1 200 OK\nContent-Type: application/json;charset=UTF-8\nCache-Control: no-store\nPragma: no-cache { \"access_token\":\"2YotnFZFEjr1zCsicMWpAA\", \"token_type\":\"example\", \"expires_in\":3600, \"refresh_token\":\"tGzv3JOkF0XG5Qx2TlKWIA\", \"example_parameter\":\"example_value\" } </pre>\n</blockquote>\n<p style=\"margin-left:0.8em;\">\n	从上面代码可以看到，相关参数使用JSON格式发送（Content-Type: application/json）。此外，HTTP头信息中明确指定不得缓存。\n</p>\n<h2>\n	七、简化模式\n</h2>\n<p style=\"margin-left:0.8em;\">\n	简化模式（implicit grant type）不通过第三方应用程序的服务器，直接在浏览器中向认证服务器申请令牌，跳过了\"授权码\"这个步骤，因此得名。所有步骤在浏览器中完成，令牌对访问者是可见的，且客户端不需要认证。\n</p>\n<p style=\"margin-left:0.8em;\">\n	<img src=\"http://www.ruanyifeng.com/blogimg/asset/2014/bg2014051205.png\" alt=\"\" title=\"\" width=\"671\" height=\"573\" align=\"\" /> \n</p>\n<p style=\"margin-left:0.8em;\">\n	它的步骤如下：\n</p>\n<blockquote>\n	<p style=\"margin-left:0.8em;\">\n		（A）客户端将用户导向认证服务器。\n	</p>\n	<p style=\"margin-left:0.8em;\">\n		（B）用户决定是否给于客户端授权。\n	</p>\n	<p style=\"margin-left:0.8em;\">\n		（C）假设用户给予授权，认证服务器将用户导向客户端指定的\"重定向URI\"，并在URI的Hash部分包含了访问令牌。\n	</p>\n	<p style=\"margin-left:0.8em;\">\n		（D）浏览器向资源服务器发出请求，其中不包括上一步收到的Hash值。\n	</p>\n	<p style=\"margin-left:0.8em;\">\n		（E）资源服务器返回一个网页，其中包含的代码可以获取Hash值中的令牌。\n	</p>\n	<p style=\"margin-left:0.8em;\">\n		（F）浏览器执行上一步获得的脚本，提取出令牌。\n	</p>\n	<p style=\"margin-left:0.8em;\">\n		（G）浏览器将令牌发给客户端。\n	</p>\n</blockquote>\n<p style=\"margin-left:0.8em;\">\n	下面是上面这些步骤所需要的参数。\n</p>\n<p style=\"margin-left:0.8em;\">\n	A步骤中，客户端发出的HTTP请求，包含以下参数：\n</p>\n<ul>\n	<li style=\"text-align:left;\">\n		response_type：表示授权类型，此处的值固定为\"token\"，必选项。\n	</li>\n	<li style=\"text-align:left;\">\n		client_id：表示客户端的ID，必选项。\n	</li>\n	<li style=\"text-align:left;\">\n		redirect_uri：表示重定向的URI，可选项。\n	</li>\n	<li style=\"text-align:left;\">\n		scope：表示权限范围，可选项。\n	</li>\n	<li style=\"text-align:left;\">\n		state：表示客户端的当前状态，可以指定任意值，认证服务器会原封不动地返回这个值。\n	</li>\n</ul>\n<p style=\"margin-left:0.8em;\">\n	下面是一个例子。\n</p>\n<blockquote>\n<pre class=\" language-http\">GET /authorize?response_type=token&amp;client_id=s6BhdRkqt3&amp;state=xyz\n        &amp;redirect_uri=https%3A%2F%2Fclient%2Eexample%2Ecom%2Fcb HTTP/1.1\nHost: server.example.com</pre>\n</blockquote>\n<p style=\"margin-left:0.8em;\">\n	C步骤中，认证服务器回应客户端的URI，包含以下参数：\n</p>\n<ul>\n	<li style=\"text-align:left;\">\n		access_token：表示访问令牌，必选项。\n	</li>\n	<li style=\"text-align:left;\">\n		token_type：表示令牌类型，该值大小写不敏感，必选项。\n	</li>\n	<li style=\"text-align:left;\">\n		expires_in：表示过期时间，单位为秒。如果省略该参数，必须其他方式设置过期时间。\n	</li>\n	<li style=\"text-align:left;\">\n		scope：表示权限范围，如果与客户端申请的范围一致，此项可省略。\n	</li>\n	<li style=\"text-align:left;\">\n		state：如果客户端的请求中包含这个参数，认证服务器的回应也必须一模一样包含这个参数。\n	</li>\n</ul>\n<p style=\"margin-left:0.8em;\">\n	下面是一个例子。\n</p>\n<blockquote>\n<pre class=\" language-http\">HTTP/1.1 302 Found</pre>\n<pre class=\" language-http\">Location: <a class=\"token url-link\" href=\"http://example.com/cb\">http://example.com/cb</a>#access_token=2YotnFZFEjr1zCsicMWpAA\n               &amp;state=xyz&amp;token_type=example&amp;expires_in=3600</pre>\n</blockquote>\n<p style=\"margin-left:0.8em;\">\n	在上面的例子中，认证服务器用HTTP头信息的Location栏，指定浏览器重定向的网址。注意，在这个网址的Hash部分包含了令牌。\n</p>\n<p style=\"margin-left:0.8em;\">\n	根据上面的D步骤，下一步浏览器会访问Location指定的网址，但是Hash部分不会发送。接下来的E步骤，服务提供商的资源服务器发送过来的代码，会提取出Hash中的令牌。\n</p>\n<h2>\n	八、密码模式\n</h2>\n<p style=\"margin-left:0.8em;\">\n	密码模式（Resource Owner Password Credentials Grant）中，用户向客户端提供自己的用户名和密码。客户端使用这些信息，向\"服务商提供商\"索要授权。\n</p>\n<p style=\"margin-left:0.8em;\">\n	在这种模式中，用户必须把自己的密码给客户端，但是客户端不得储存密码。这通常用在用户对客户端高度信任的情况下，比如客户端是操作系统的一部分，或者由一个著名公司出品。而认证服务器只有在其他授权模式无法执行的情况下，才能考虑使用这种模式。\n</p>\n<p style=\"margin-left:0.8em;\">\n	<img src=\"http://www.ruanyifeng.com/blogimg/asset/2014/bg2014051206.png\" alt=\"\" title=\"\" width=\"799\" height=\"406\" align=\"\" /> \n</p>\n<p style=\"margin-left:0.8em;\">\n	它的步骤如下：\n</p>\n<blockquote>\n	<p style=\"margin-left:0.8em;\">\n		（A）用户向客户端提供用户名和密码。\n	</p>\n	<p style=\"margin-left:0.8em;\">\n		（B）客户端将用户名和密码发给认证服务器，向后者请求令牌。\n	</p>\n	<p style=\"margin-left:0.8em;\">\n		（C）认证服务器确认无误后，向客户端提供访问令牌。\n	</p>\n</blockquote>\n<p style=\"margin-left:0.8em;\">\n	B步骤中，客户端发出的HTTP请求，包含以下参数：\n</p>\n<ul>\n	<li style=\"text-align:left;\">\n		grant_type：表示授权类型，此处的值固定为\"password\"，必选项。\n	</li>\n	<li style=\"text-align:left;\">\n		username：表示用户名，必选项。\n	</li>\n	<li style=\"text-align:left;\">\n		password：表示用户的密码，必选项。\n	</li>\n	<li style=\"text-align:left;\">\n		scope：表示权限范围，可选项。\n	</li>\n</ul>\n<p style=\"margin-left:0.8em;\">\n	下面是一个例子。\n</p>\n<blockquote>\n<pre class=\" language-http\">POST /token HTTP/1.1\nHost: server.example.com\nAuthorization: Basic czZCaGRSa3F0MzpnWDFmQmF0M2JW\nContent-Type: application/x-www-form-urlencoded\ngrant_type=password&amp;username=johndoe&amp;password=A3ddj3w</pre>\n</blockquote>\n<p style=\"margin-left:0.8em;\">\n	C步骤中，认证服务器向客户端发送访问令牌，下面是一个例子。\n</p>\n<blockquote>\n<pre class=\" language-http\">HTTP/1.1 200 OK\nContent-Type: application/json;charset=UTF-8\nCache-Control: no-store\nPragma: no-cache { \"access_token\":\"2YotnFZFEjr1zCsicMWpAA\", \"token_type\":\"example\", \"expires_in\":3600, \"refresh_token\":\"tGzv3JOkF0XG5Qx2TlKWIA\", \"example_parameter\":\"example_value\" } </pre>\n</blockquote>\n<p style=\"margin-left:0.8em;\">\n	上面代码中，各个参数的含义参见《授权码模式》一节。\n</p>\n<p style=\"margin-left:0.8em;\">\n	整个过程中，客户端不得保存用户的密码。\n</p>\n<h2>\n	九、客户端模式\n</h2>\n<p style=\"margin-left:0.8em;\">\n	客户端模式（Client Credentials Grant）指客户端以自己的名义，而不是以用户的名义，向\"服务提供商\"进行认证。严格地说，客户端模式并不属于OAuth框架所要解决的问题。在这种模式中，用户直接向客户端注册，客户端以自己的名义要求\"服务提供商\"提供服务，其实不存在授权问题。\n</p>\n<p style=\"margin-left:0.8em;\">\n	<img src=\"http://www.ruanyifeng.com/blogimg/asset/2014/bg2014051207.png\" alt=\"\" title=\"\" width=\"802\" height=\"183\" align=\"\" /> \n</p>\n<p style=\"margin-left:0.8em;\">\n	它的步骤如下：\n</p>\n<blockquote>\n	<p style=\"margin-left:0.8em;\">\n		（A）客户端向认证服务器进行身份认证，并要求一个访问令牌。\n	</p>\n	<p style=\"margin-left:0.8em;\">\n		（B）认证服务器确认无误后，向客户端提供访问令牌。\n	</p>\n</blockquote>\n<p style=\"margin-left:0.8em;\">\n	A步骤中，客户端发出的HTTP请求，包含以下参数：\n</p>\n<ul>\n	<li style=\"text-align:left;\">\n		granttype：表示授权类型，此处的值固定为\"clientcredentials\"，必选项。\n	</li>\n	<li style=\"text-align:left;\">\n		scope：表示权限范围，可选项。\n	</li>\n</ul>\n<blockquote>\n<pre class=\" language-http\">POST /token HTTP/1.1\nHost: server.example.com\nAuthorization: Basic czZCaGRSa3F0MzpnWDFmQmF0M2JW\nContent-Type: application/x-www-form-urlencoded\ngrant_type=client_credentials</pre>\n</blockquote>\n<p style=\"margin-left:0.8em;\">\n	认证服务器必须以某种方式，验证客户端身份。\n</p>\n<p style=\"margin-left:0.8em;\">\n	B步骤中，认证服务器向客户端发送访问令牌，下面是一个例子。\n</p>\n<blockquote>\n<pre class=\" language-http\">HTTP/1.1 200 OK\nContent-Type: application/json;charset=UTF-8\nCache-Control: no-store\nPragma: no-cache { \"access_token\":\"2YotnFZFEjr1zCsicMWpAA\", \"token_type\":\"example\", \"expires_in\":3600, \"example_parameter\":\"example_value\" } </pre>\n</blockquote>\n<p style=\"margin-left:0.8em;\">\n	上面代码中，各个参数的含义参见《授权码模式》一节。\n</p>\n<h2>\n	十、更新令牌\n</h2>\n<p style=\"margin-left:0.8em;\">\n	如果用户访问的时候，客户端的\"访问令牌\"已经过期，则需要使用\"更新令牌\"申请一个新的访问令牌。\n</p>\n<p style=\"margin-left:0.8em;\">\n	客户端发出更新令牌的HTTP请求，包含以下参数：\n</p>\n<ul>\n	<li style=\"text-align:left;\">\n		granttype：表示使用的授权模式，此处的值固定为\"refreshtoken\"，必选项。\n	</li>\n	<li style=\"text-align:left;\">\n		refresh_token：表示早前收到的更新令牌，必选项。\n	</li>\n	<li style=\"text-align:left;\">\n		scope：表示申请的授权范围，不可以超出上一次申请的范围，如果省略该参数，则表示与上一次一致。\n	</li>\n</ul>\n<p style=\"margin-left:0.8em;\">\n	下面是一个例子。\n</p>\n<blockquote>\n<pre class=\" language-http\">POST /token HTTP/1.1\nHost: server.example.com\nAuthorization: Basic czZCaGRSa3F0MzpnWDFmQmF0M2JW\nContent-Type: application/x-www-form-urlencoded\ngrant_type=refresh_token&amp;refresh_token=tGzv3JOkF0XG5Qx2TlKWIA</pre>\n<pre class=\" language-http\">（完）\n\n原文地址： <a href=\"http://www.ruanyifeng.com/blog/2014/05/oauth_2_0.html\" target=\"_blank\">理解OAuth 2.0 </a> </pre>\n</blockquote>\n<p style=\"margin-left:0.8em;\">\n	<br />\n</p>',0,1508982135,1522120955),(7,1,2,'curl网站开发指南','','<p>\n	<a href=\"http://curl.haxx.se/\" target=\"_blank\">curl</a>是一种命令行工具，作用是发出网络请求，然后得到和提取数据，显示在\"标准输出\"（stdout）上面。\n</p>\n<p>\n	它支持多种协议，下面举例讲解如何将它用于网站开发。\n</p>\n<p>\n	一、查看网页源码\n</p>\n<p>\n	直接在curl命令后加上网址，就可以看到网页源码。我们以网址www.sina.com为例（选择该网址，主要因为它的网页代码较短）：\n</p>\n<blockquote style=\"color:#111111;background-color:#F5F2F0;font-family:Consolas, Monaco, \" font-size:10px;\"=\"\">\n<p>\n	&emsp;&emsp;$ curl www.sina.com\n</p>\n	</blockquote>\n<blockquote style=\"color:#111111;background-color:#F5F2F0;font-family:Consolas, Monaco, \" font-size:10px;\"=\"\">\n	<p>\n		&emsp;&emsp;<br />\n&emsp;&emsp;<br />\n&emsp;&emsp;301 Moved Permanently\n	</p>\n	<h1>\n		Moved Permanently\n	</h1>\n<br />\n&emsp;&emsp;\n	<p>\n		The document has moved <a href=\"http://www.sina.com.cn/\">here</a>.\n	</p>\n<br />\n&emsp;&emsp;\n	<p>\n		<br />\n	</p>\n</blockquote>\n<p>\n	如果要把这个网页保存下来，可以使用`-o`参数，这就相当于使用wget命令了。\n</p>\n<blockquote style=\"color:#111111;background-color:#F5F2F0;font-family:Consolas, Monaco, \" font-size:10px;\"=\"\">\n<p>\n	&emsp;&emsp;$ curl -o [文件名] www.sina.com\n</p>\n	</blockquote>\n	<p>\n		二、自动跳转\n	</p>\n	<p>\n		有的网址是自动跳转的。使用`-L`参数，curl就会跳转到新的网址。\n	</p>\n<blockquote style=\"color:#111111;background-color:#F5F2F0;font-family:Consolas, Monaco, \" font-size:10px;\"=\"\">\n	<p>\n		&emsp;&emsp;$ curl -L www.sina.com\n	</p>\n</blockquote>\n<p>\n	键入上面的命令，结果就自动跳转为www.sina.com.cn。\n</p>\n<p>\n	三、显示头信息\n</p>\n<p>\n	`-i`参数可以显示http response的头信息，连同网页代码一起。\n</p>\n<blockquote style=\"color:#111111;background-color:#F5F2F0;font-family:Consolas, Monaco, \" font-size:10px;\"=\"\">\n<p>\n	&emsp;&emsp;$ curl -i www.sina.com\n</p>\n	</blockquote>\n<blockquote style=\"color:#111111;background-color:#F5F2F0;font-family:Consolas, Monaco, \" font-size:10px;\"=\"\">\n	<p>\n		&emsp;&emsp;HTTP/1.0 301 Moved Permanently<br />\n&emsp;&emsp;Date: Sat, 03 Sep 2011 23:44:10 GMT<br />\n&emsp;&emsp;Server: Apache/2.0.54 (Unix)<br />\n&emsp;&emsp;Location: http://www.sina.com.cn/<br />\n&emsp;&emsp;Cache-Control: max-age=3600<br />\n&emsp;&emsp;Expires: Sun, 04 Sep 2011 00:44:10 GMT<br />\n&emsp;&emsp;Vary: Accept-Encoding<br />\n&emsp;&emsp;Content-Length: 231<br />\n&emsp;&emsp;Content-Type: text/html; charset=iso-8859-1<br />\n&emsp;&emsp;Age: 3239<br />\n&emsp;&emsp;X-Cache: HIT from sh201-9.sina.com.cn<br />\n&emsp;&emsp;Connection: close\n	</p>\n	<p>\n		&emsp;&emsp;<br />\n&emsp;&emsp;<br />\n&emsp;&emsp;301 Moved Permanently\n	</p>\n	<h1>\n		Moved Permanently\n	</h1>\n<br />\n&emsp;&emsp;\n	<p>\n		The document has moved <a href=\"http://www.sina.com.cn/\">here</a>.\n	</p>\n<br />\n&emsp;&emsp;\n	<p>\n		<br />\n	</p>\n</blockquote>\n<p>\n	`-I`参数则是只显示http response的头信息。\n</p>\n<p>\n	四、显示通信过程\n</p>\n<p>\n	`-v`参数可以显示一次http通信的整个过程，包括端口连接和http request头信息。\n</p>\n<blockquote style=\"color:#111111;background-color:#F5F2F0;font-family:Consolas, Monaco, \" font-size:10px;\"=\"\">\n<p>\n	&emsp;&emsp;$ curl -v www.sina.com\n</p>\n	</blockquote>\n<blockquote style=\"color:#111111;background-color:#F5F2F0;font-family:Consolas, Monaco, \" font-size:10px;\"=\"\">\n	<p>\n		&emsp;&emsp;* About to connect() to www.sina.com port 80 (#0)<br />\n&emsp;&emsp;* Trying 61.172.201.195... connected<br />\n&emsp;&emsp;* Connected to www.sina.com (61.172.201.195) port 80 (#0)<br />\n&emsp;&emsp;&gt; GET / HTTP/1.1<br />\n&emsp;&emsp;&gt; User-Agent: curl/7.21.3 (i686-pc-linux-gnu) libcurl/7.21.3 OpenSSL/0.9.8o zlib/1.2.3.4 libidn/1.18<br />\n&emsp;&emsp;&gt; Host: www.sina.com<br />\n&emsp;&emsp;&gt; Accept: */*<br />\n&emsp;&emsp;&gt; <br />\n&emsp;&emsp;* HTTP 1.0, assume close after body<br />\n&emsp;&emsp;&lt; HTTP/1.0 301 Moved Permanently<br />\n&emsp;&emsp;&lt; Date: Sun, 04 Sep 2011 00:42:39 GMT<br />\n&emsp;&emsp;&lt; Server: Apache/2.0.54 (Unix)<br />\n&emsp;&emsp;&lt; Location: http://www.sina.com.cn/<br />\n&emsp;&emsp;&lt; Cache-Control: max-age=3600<br />\n&emsp;&emsp;&lt; Expires: Sun, 04 Sep 2011 01:42:39 GMT<br />\n&emsp;&emsp;&lt; Vary: Accept-Encoding<br />\n&emsp;&emsp;&lt; Content-Length: 231<br />\n&emsp;&emsp;&lt; Content-Type: text/html; charset=iso-8859-1<br />\n&emsp;&emsp;&lt; X-Cache: MISS from sh201-19.sina.com.cn<br />\n&emsp;&emsp;&lt; Connection: close<br />\n&emsp;&emsp;&lt; <br />\n&emsp;&emsp;<br />\n&emsp;&emsp;<br />\n&emsp;&emsp;301 Moved Permanently\n	</p>\n	<h1>\n		Moved Permanently\n	</h1>\n<br />\n&emsp;&emsp;\n	<p>\n		The document has moved <a href=\"http://www.sina.com.cn/\">here</a>.\n	</p>\n<br />\n&emsp;&emsp;<br />\n&emsp;&emsp;* Closing connection #0\n	<p>\n		<br />\n	</p>\n</blockquote>\n<p>\n	如果你觉得上面的信息还不够，那么下面的命令可以查看更详细的通信过程。\n</p>\n<blockquote style=\"color:#111111;background-color:#F5F2F0;font-family:Consolas, Monaco, \" font-size:10px;\"=\"\">\n<p>\n	&emsp;&emsp;$ curl --trace output.txt www.sina.com\n</p>\n	</blockquote>\n	<p>\n		或者\n	</p>\n<blockquote style=\"color:#111111;background-color:#F5F2F0;font-family:Consolas, Monaco, \" font-size:10px;\"=\"\">\n	<p>\n		&emsp;&emsp;$ curl --trace-ascii output.txt www.sina.com\n	</p>\n</blockquote>\n<p>\n	运行后，请打开output.txt文件查看。\n</p>\n<p>\n	五、发送表单信息\n</p>\n<p>\n	发送表单信息有GET和POST两种方法。GET方法相对简单，只要把数据附在网址后面就行。\n</p>\n<blockquote style=\"color:#111111;background-color:#F5F2F0;font-family:Consolas, Monaco, \" font-size:10px;\"=\"\">\n<p>\n	&emsp;&emsp;$ curl example.com/form.cgi?data=xxx\n</p>\n	</blockquote>\n	<p>\n		POST方法必须把数据和网址分开，curl就要用到--data参数。\n	</p>\n<blockquote style=\"color:#111111;background-color:#F5F2F0;font-family:Consolas, Monaco, \" font-size:10px;\"=\"\">\n	<p>\n		&emsp;&emsp;$ curl -X POST --data \"data=xxx\" example.com/form.cgi\n	</p>\n</blockquote>\n<p>\n	如果你的数据没有经过表单编码，还可以让curl为你编码，参数是`--data-urlencode`。\n</p>\n<blockquote style=\"color:#111111;background-color:#F5F2F0;font-family:Consolas, Monaco, \" font-size:10px;\"=\"\">\n<p>\n	&emsp;&emsp;$ curl -X POST--data-urlencode \"date=April 1\" example.com/form.cgi\n</p>\n	</blockquote>\n	<p>\n		六、HTTP动词\n	</p>\n	<p>\n		curl默认的HTTP动词是GET，使用`-X`参数可以支持其他动词。\n	</p>\n<blockquote style=\"color:#111111;background-color:#F5F2F0;font-family:Consolas, Monaco, \" font-size:10px;\"=\"\">\n	<p>\n		&emsp;&emsp;$ curl -X POST www.example.com\n	</p>\n</blockquote>\n<blockquote style=\"color:#111111;background-color:#F5F2F0;font-family:Consolas, Monaco, \" font-size:10px;\"=\"\">\n<p>\n	&emsp;&emsp;$ curl -X DELETE www.example.com\n</p>\n	</blockquote>\n	<p>\n		七、文件上传\n	</p>\n	<p>\n		假定文件上传的表单是下面这样：\n	</p>\n<blockquote style=\"color:#111111;background-color:#F5F2F0;font-family:Consolas, Monaco, \" font-size:10px;\"=\"\">\n	<p>\n		<br />\n	</p>\n</blockquote>\n<p>\n	你可以用curl这样上传文件：\n</p>\n<blockquote style=\"color:#111111;background-color:#F5F2F0;font-family:Consolas, Monaco, \" font-size:10px;\"=\"\">\n<p>\n	&emsp;&emsp;$ curl --form upload=@localfilename --form press=OK [URL]\n</p>\n	</blockquote>\n	<p>\n		八、Referer字段\n	</p>\n	<p>\n		有时你需要在http request头信息中，提供一个referer字段，表示你是从哪里跳转过来的。\n	</p>\n<blockquote style=\"color:#111111;background-color:#F5F2F0;font-family:Consolas, Monaco, \" font-size:10px;\"=\"\">\n	<p>\n		&emsp;&emsp;$ curl --referer http://www.example.com http://www.example.com\n	</p>\n</blockquote>\n<p>\n	九、User Agent字段\n</p>\n<p>\n	这个字段是用来表示客户端的设备信息。服务器有时会根据这个字段，针对不同设备，返回不同格式的网页，比如手机版和桌面版。\n</p>\n<p>\n	iPhone4的User Agent是\n</p>\n<blockquote style=\"color:#111111;background-color:#F5F2F0;font-family:Consolas, Monaco, \" font-size:10px;\"=\"\">\n<p>\n	&emsp;&emsp;Mozilla/5.0 (iPhone; U; CPU iPhone OS 4_0 like Mac OS X; en-us) AppleWebKit/532.9 (KHTML, like Gecko) Version/4.0.5 Mobile/8A293 Safari/6531.22.7\n</p>\n	</blockquote>\n	<p>\n		curl可以这样模拟：\n	</p>\n<blockquote style=\"color:#111111;background-color:#F5F2F0;font-family:Consolas, Monaco, \" font-size:10px;\"=\"\">\n	<p>\n		&emsp;&emsp;$ curl --user-agent \"[User Agent]\" [URL]\n	</p>\n</blockquote>\n<p>\n	十、cookie\n</p>\n<p>\n	使用`--cookie`参数，可以让curl发送cookie。\n</p>\n<blockquote style=\"color:#111111;background-color:#F5F2F0;font-family:Consolas, Monaco, \" font-size:10px;\"=\"\">\n<p>\n	&emsp;&emsp;$ curl --cookie \"name=xxx\" www.example.com\n</p>\n	</blockquote>\n	<p>\n		至于具体的cookie的值，可以从http response头信息的`Set-Cookie`字段中得到。\n	</p>\n	<p>\n		`-c cookie-file`可以保存服务器返回的cookie到文件，`-b cookie-file`可以使用这个文件作为cookie信息，进行后续的请求。\n	</p>\n<blockquote style=\"color:#111111;background-color:#F5F2F0;font-family:Consolas, Monaco, \" font-size:10px;\"=\"\">\n	<p>\n		&emsp;&emsp;$ curl -c cookies http://example.com<br />\n&emsp;&emsp;$ curl -b cookies http://example.com\n	</p>\n</blockquote>\n<p>\n	十一、增加头信息\n</p>\n<p>\n	有时需要在http request之中，自行增加一个头信息。`--header`参数就可以起到这个作用。\n</p>\n<blockquote style=\"color:#111111;background-color:#F5F2F0;font-family:Consolas, Monaco, \" font-size:10px;\"=\"\">\n<p>\n	&emsp;&emsp;$ curl --header \"Content-Type:application/json\" http://example.com\n</p>\n	</blockquote>\n	<p>\n		十二、HTTP认证\n	</p>\n	<p>\n		有些网域需要HTTP认证，这时curl需要用到`--user`参数。\n	</p>\n<blockquote style=\"color:#111111;background-color:#F5F2F0;font-family:Consolas, Monaco, \" font-size:10px;\"=\"\">\n	<p>\n		&emsp;&emsp;$ curl --user name:password example.com\n	</p>\n</blockquote>\n<pre class=\" language-http\">\n原文地址： <a href=\"http://www.ruanyifeng.com/blog/2011/09/curl.html\" target=\"_blank\">curl网站开发指南</a></pre>',0,1515052040,1519719608),(8,1,9,'HTTPS自签发CA证书','','<div class=\"j-col-xs-12 j-col-sm-12 j-col-md-9\" style=\"margin:0px;padding:0px 0.5rem;\">\n	<div class=\"j-container j-content\" style=\"margin:1rem auto 0px;padding:1rem;\">\n		<p style=\"text-align:left;font-weight:500;\">\n			<span style=\"font-size:16px;\"></span>&nbsp; &nbsp; HTTPS服务是工作在SSL/TLS上的HTTP。\n		</p>\n		<div class=\"j-container\" style=\"margin:0px auto;padding:0px 1rem;\">\n			<p>\n				首先简单区分一下HTTPS，SSL ，TLS ，OpenSSL这四者的关系：\n			</p>\n			<ol>\n				<li>\n					SSL：（Secure Socket Layer，安全套接字层）是在客户端和服务器之间建立一条SSL安全通道的安全协议；\n				</li>\n				<li>\n					TLS：（Transport Layer Security，传输层安全协议），用于两个应用程序之间提供保密性和数据完整性；\n				</li>\n				<li>\n					TLS的前身是SSL；\n				</li>\n				<li>\n					OpenSSL是TLS/SSL协议的开源实现，提供开发库和命令行程序；\n				</li>\n				<li>\n					HTTPS是HTTP的加密版，底层使用的加密协议是TLS。\n				</li>\n			</ol>\n			<p>\n				结论：SSL/TLS 是协议，OpenSSL是协议的代码实现。\n			</p>\n			<p>\n				<img src=\"/public/plugin/kindeditor/attached/image/20180623/20180623110955_11913.jpg\" alt=\"\" /> \n			</p>\n			<h2 id=\"图说https\">\n				图说HTTPS\n			</h2>\n			<p>\n				<img src=\"/public/plugin/kindeditor/attached/image/20180327/20180327033143_67797.jpg\" alt=\"\" /> \n			</p>\n			<p>\n				<br />\n			</p>\n			<p>\n				可以看到浏览器上面展示的url前面会加一把绿色的锁，表示这个是安全的HTTPS url。要达到这个目标需要什么：\n			</p>\n			<ol>\n				<li>\n					HTTPS服务器：server私钥 + CA签发的证书\n				</li>\n				<li>\n					client客户端：CA证书\n				</li>\n				<li>\n					nginx\n				</li>\n				<li>\n					配置hosts\n				</li>\n			</ol>\n			<h2 id=\"一个简单的https服务器\">\n				一个简单的HTTPS服务器\n			</h2>\n			<p>\n				Node.js底层引入了OpenSSL开源库，OpenSSL是HTTPS模块的安全保障。下面来创建一个HTTPS服务器。\n			</p>\n			<div class=\"language-js highlighter-rouge\" style=\"margin:0px;padding:0px;\">\n				<div class=\"highlight\" style=\"margin:0px 0px 16px;padding:0px;background:#444444 !important;\">\n<pre class=\"highlight\"><span class=\"kd\" style=\"color:#66D9EF;\">const</span> <span class=\"nx\" style=\"color:#A6E22E;\">https</span> <span class=\"o\" style=\"color:#F92672;\">=</span> <span class=\"nx\" style=\"color:#A6E22E;\">require</span><span class=\"p\" style=\"color:#F8F8F2;\">(</span><span class=\"s1\" style=\"color:#E6DB74;\">\'https\'</span><span class=\"p\" style=\"color:#F8F8F2;\">);</span> <span class=\"kd\" style=\"color:#66D9EF;\">const</span> <span class=\"nx\" style=\"color:#A6E22E;\">fs</span> <span class=\"o\" style=\"color:#F92672;\">=</span> <span class=\"nx\" style=\"color:#A6E22E;\">require</span><span class=\"p\" style=\"color:#F8F8F2;\">(</span><span class=\"s1\" style=\"color:#E6DB74;\">\'fs\'</span><span class=\"p\" style=\"color:#F8F8F2;\">);</span> <span class=\"kd\" style=\"color:#66D9EF;\">let</span> <span class=\"nx\" style=\"color:#A6E22E;\">options</span> <span class=\"o\" style=\"color:#F92672;\">=</span> <span class=\"p\" style=\"color:#F8F8F2;\">{</span> <span class=\"na\" style=\"color:#A6E22E;\">key</span><span class=\"p\" style=\"color:#F8F8F2;\">:</span> <span class=\"nx\" style=\"color:#A6E22E;\">fs</span><span class=\"p\" style=\"color:#F8F8F2;\">.</span><span class=\"nx\" style=\"color:#A6E22E;\">readFileSync</span><span class=\"p\" style=\"color:#F8F8F2;\">(</span><span class=\"s1\" style=\"color:#E6DB74;\">\'./server.key\'</span><span class=\"p\" style=\"color:#F8F8F2;\">),</span><span class=\"c1\" style=\"color:#75715E;\">//私钥</span> <span class=\"na\" style=\"color:#A6E22E;\">cert</span><span class=\"p\" style=\"color:#F8F8F2;\">:</span> <span class=\"nx\" style=\"color:#A6E22E;\">fs</span><span class=\"p\" style=\"color:#F8F8F2;\">.</span><span class=\"nx\" style=\"color:#A6E22E;\">readFileSync</span><span class=\"p\" style=\"color:#F8F8F2;\">(</span><span class=\"s1\" style=\"color:#E6DB74;\">\'./server.crt\'</span><span class=\"p\" style=\"color:#F8F8F2;\">)</span><span class=\"c1\" style=\"color:#75715E;\">//数字证书</span> <span class=\"p\" style=\"color:#F8F8F2;\">};</span> <span class=\"nx\" style=\"color:#A6E22E;\">https</span><span class=\"p\" style=\"color:#F8F8F2;\">.</span><span class=\"nx\" style=\"color:#A6E22E;\">createServer</span><span class=\"p\" style=\"color:#F8F8F2;\">(</span><span class=\"nx\" style=\"color:#A6E22E;\">options</span> <span class=\"p\" style=\"color:#F8F8F2;\">,</span> <span class=\"p\" style=\"color:#F8F8F2;\">(</span><span class=\"nx\" style=\"color:#A6E22E;\">req</span> <span class=\"p\" style=\"color:#F8F8F2;\">,</span> <span class=\"nx\" style=\"color:#A6E22E;\">res</span><span class=\"p\" style=\"color:#F8F8F2;\">)</span><span class=\"o\" style=\"color:#F92672;\">=&gt;</span><span class=\"p\" style=\"color:#F8F8F2;\">{</span> <span class=\"nx\" style=\"color:#A6E22E;\">console</span><span class=\"p\" style=\"color:#F8F8F2;\">.</span><span class=\"nx\" style=\"color:#A6E22E;\">log</span><span class=\"p\" style=\"color:#F8F8F2;\">(</span><span class=\"s1\" style=\"color:#E6DB74;\">\'server got it\'</span><span class=\"p\" style=\"color:#F8F8F2;\">);</span> <span class=\"nx\" style=\"color:#A6E22E;\">res</span><span class=\"p\" style=\"color:#F8F8F2;\">.</span><span class=\"nx\" style=\"color:#A6E22E;\">writeHead</span><span class=\"p\" style=\"color:#F8F8F2;\">(</span><span class=\"mi\" style=\"color:#AE81FF;\">200</span><span class=\"p\" style=\"color:#F8F8F2;\">);</span> <span class=\"nx\" style=\"color:#A6E22E;\">res</span><span class=\"p\" style=\"color:#F8F8F2;\">.</span><span class=\"nx\" style=\"color:#A6E22E;\">end</span><span class=\"p\" style=\"color:#F8F8F2;\">(</span><span class=\"s1\" style=\"color:#E6DB74;\">\'hello https is work\'</span><span class=\"p\" style=\"color:#F8F8F2;\">);</span> <span class=\"p\" style=\"color:#F8F8F2;\">}).</span><span class=\"nx\" style=\"color:#A6E22E;\">listen</span><span class=\"p\" style=\"color:#F8F8F2;\">(</span><span class=\"mi\" style=\"color:#AE81FF;\">8888</span><span class=\"p\" style=\"color:#F8F8F2;\">);</span> <span class=\"nx\" style=\"color:#A6E22E;\">console</span><span class=\"p\" style=\"color:#F8F8F2;\">.</span><span class=\"nx\" style=\"color:#A6E22E;\">log</span><span class=\"p\" style=\"color:#F8F8F2;\">(</span><span class=\"s1\" style=\"color:#E6DB74;\">\'server start\'</span><span class=\"p\" style=\"color:#F8F8F2;\">);</span> </pre>\n				</div>\n			</div>\n			<p>\n				可以发现https服务器比http服务器要多一个options参数。options里面包含的是https服务器的密钥和数字证书。\n			</p>\n			<p>\n				问题来了：\n			</p>\n			<ol>\n				<li>\n					密钥是什么？\n				</li>\n				<li>\n					数字证书（CA：Certificate Authority）是什么？\n				</li>\n			</ol>\n			<h3 id=\"ssltls密钥\" style=\"font-size:1.25em;\">\n				SSL/TLS密钥\n			</h3>\n			<p>\n				SSL/TLS是一个公钥和私钥的结构，非对称结构，每个客户端和服务器端都有自己的公钥和私钥。公钥用来加密数据，私钥用来对数据解密。\n			</p>\n			<p>\n				<img src=\"/public/plugin/kindeditor/attached/image/20180623/20180623094445_53971.jpg\" alt=\"\" /> \n			</p>\n			<p>\n				总结：解决数据加密和解密的问题。\n			</p>\n			<p>\n				好，现在通过命令行执行OpenSSL生成服务器私钥：\n			</p>\n			<div class=\"highlighter-rouge\" style=\"margin:0px;padding:0px;\">\n				<div class=\"highlight\" style=\"margin:0px 0px 16px;padding:0px;\">\n<pre class=\"highlight\">openssl genrsa -out server.key 1024</pre>\n				</div>\n			</div>\n			<blockquote style=\"color:#777777;\">\n				<p>\n					没有安装openssl命令行的需要自行安装。\n				</p>\n			</blockquote>\n			<h3 id=\"数字证书\" style=\"font-size:1.25em;\">\n				数字证书\n			</h3>\n			<p>\n				数据都加密了，为什么还要数字证书啊？\n			</p>\n			<p>\n				公私钥的非对称加密虽然好，但是网络还是可能存在窃听的情况。典型的例子：中间人攻击。\n			</p>\n			<p>\n				<img src=\"/public/plugin/kindeditor/attached/image/20180623/20180623094621_85096.jpg\" alt=\"\" style=\"height:auto;width:auto;\" width=\"56\" height=\"24\" title=\"\" align=\"\" /> \n			</p>\n			<p>\n				原理和HTTP代理服务器一样。\n			</p>\n			<p>\n				为了确保数据安全引入了CA。CA会给上面创建的HTTPS服务器颁发数字证书。\n			</p>\n			<p>\n				现在有权威的CA机构的证书费用都很昂贵，有钱的可以去买，没钱的只能自签名CA证书了。\n			</p>\n			<h2 id=\"自签名证书\">\n				自签名证书\n			</h2>\n			<p>\n				所谓的自签名证书，就是自己扮演CA机构，给自己的服务器颁发签名证书。\n			</p>\n			<h3 id=\"ca机构\" style=\"font-size:1.25em;\">\n				CA机构\n			</h3>\n			<p>\n				自己扮演CA角色，必须要准备好CA机构相关的文件。包括：私钥，CSR文件，CA证书。\n			</p>\n			<p>\n				1.命令行生成CA私钥:\n			</p>\n			<div class=\"highlighter-rouge\" style=\"margin:0px;padding:0px;\">\n				<div class=\"highlight\" style=\"margin:0px 0px 16px;padding:0px;\">\n<pre class=\"highlight\">openssl genrsa -out ca.key 1024</pre>\n				</div>\n			</div>\n			<p>\n				2.命令行生成CSR文件：\n			</p>\n			<div class=\"highlighter-rouge\" style=\"margin:0px;padding:0px;\">\n				<div class=\"highlight\" style=\"margin:0px 0px 16px;padding:0px;\">\n<pre class=\"highlight\">openssl req -new -key ca.key -out ca.csr</pre>\n				</div>\n			</div>\n			<p>\n				<img src=\"/public/plugin/kindeditor/attached/image/20180623/20180623101537_27660.jpg\" alt=\"\" /> \n			</p>\n			<p>\n				CSR是Cerificate Signing Request的英文缩写（即证书请求文件），是证书申请者向证书颁发机构（CA）申请证书时需要提供的文件。里面包含了一些申请者的基本信息，比如Common Name、 Organization等。同时也包含了申请者的公钥。\n			</p>\n			<blockquote style=\"color:#777777;\">\n				<p>\n					注意：存在子域名时，需要把Common Name 改为：*.test.com类似，表示匹配。\n				</p>\n			</blockquote>\n			<p>\n				3.命令行生成CA自签名证书：\n			</p>\n			<div class=\"highlighter-rouge\" style=\"margin:0px;padding:0px;\">\n				<div class=\"highlight\" style=\"margin:0px 0px 16px;padding:0px;\">\n<pre class=\"highlight\">openssl x509 -req -in ca.csr -signkey ca.key -out ca.crt</pre>\n				</div>\n			</div>\n			<p>\n				CA机构的文件准备完毕，可以准备为HTTPS服务器颁发证书咯。\n			</p>\n			<h3 id=\"颁发签名证书\" style=\"font-size:1.25em;\">\n				颁发签名证书\n			</h3>\n			<p>\n				HTTPS服务器的私钥（上文的：server.key）已经生成。通过服务器私钥生成CSR文件提交给CA机构，CA机构通过自己的证书，私钥和服务器的CSR文件来给服务器颁发带CA认证的证书。\n			</p>\n			<p>\n				1.首先HTTPS服务器得准备CSR文件：\n			</p>\n			<div class=\"highlighter-rouge\" style=\"margin:0px;padding:0px;\">\n				<div class=\"highlight\" style=\"margin:0px 0px 16px;padding:0px;\">\n<pre class=\"highlight\">openssl req -new -key server.key -out server.csr</pre>\n				</div>\n			</div>\n			<p>\n				<img src=\"/public/plugin/kindeditor/attached/image/20180623/20180623101625_19120.jpg\" alt=\"server\" style=\"height:auto;width:auto;\" /> \n			</p>\n			<p>\n				2.CA机构颁发服务器证书：\n			</p>\n			<div class=\"highlighter-rouge\" style=\"margin:0px;padding:0px;\">\n				<div class=\"highlight\" style=\"margin:0px 0px 16px;padding:0px;\">\n<pre class=\"highlight\">openssl x509 -req -sha256 -extfile v3.ext -CA ca.crt -CAkey ca.key -CAcreateserial -in server.csr -out server.crt</pre>\n				</div>\n			</div>\n			<p>\n				上面指定了证书的版本号为<a href=\"https://en.wikipedia.org/wiki/X.509\">X.509</a>的（v3）第3个扩展版本。 上面还指定了CA机构的证书和私钥。还包括服务器的证书申请文件，以及指定的保存服务器证书的文件。\n			</p>\n			<blockquote style=\"color:#777777;\">\n				<p>\n					注意：存在子域名时，需要把Common Name 改为：*.test.com类似，表示匹配。\n				</p>\n			</blockquote>\n			<p>\n				默认的v3.ext 文件：\n			</p>\n<pre>authorityKeyIdentifier=keyid,issuer\nbasicConstraints=CA:FALSE\nkeyUsage=digitalSignature, nonRepudiation, keyEncipherment, dataEncipherment\nsubjectAltName=@alt_names\n\n[alt_names]\nDNS.1=www.test.com</pre>\n			<blockquote style=\"color:#777777;\">\n				<p>\n					注意：DNS.1=www.test.com&nbsp;这里指定了给哪个domain，与自己服务器域名要保持一致。存在子域名改为*.test.com。\n				</p>\n			</blockquote>\n			<p>\n				一句话概括：CA机构给服务器颁发哪个版本的证书。\n			</p>\n			<h2 id=\"实战之谈\">\n				实战之谈\n			</h2>\n			<p>\n				准备工作都做好了，现在就来访问一下呗。\n			</p>\n			<p>\n				1.启动server：\n			</p>\n			<div class=\"highlighter-rouge\" style=\"margin:0px;padding:0px;\">\n				<div class=\"highlight\" style=\"margin:0px 0px 16px;padding:0px;\">\n<pre class=\"highlight\">node server.js</pre>\n				</div>\n			</div>\n			<p>\n				2.配置nginx\n			</p>\n			<div class=\"highlighter-rouge\" style=\"margin:0px;padding:0px;\">\n				<div class=\"highlight\" style=\"margin:0px 0px 16px;padding:0px;\">\n<pre class=\"highlight\">server{\n    listen 443;\n    server_name www.test.com;\n    client_max_body_size 128M;\n\n    index index.html index.htm;\n    error_log D:/Wnmp/logs/error_test.com.log;\n    access_log D:/Wnmp/logs/access_test.com.log combined;\n    \n    ssl             on;\n    ssl_certificate E:/node/https/server.crt;\n    ssl_certificate_key     E:/node/https/server.key;\n\n    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;\n    ssl_ciphers \"EECDH+ECDSA+AESGCM EECDH+aRSA+AESGCM EECDH+ECDSA+SHA384EECDH+ECDSA+SHA256 EECDH+aRSA+SHA384 EECDH+aRSA+SHA256 EECDH+aRSA+RC4EECDH EDH+aRSA RC4 !aNULL !eNULL !LOW !3DES !MD5 !EXP !PSK !SRP !DSS !MEDIUM\";\n    ssl_prefer_server_ciphers on;\n\n    add_header Strict-Transport-Security \"max-age=31536000; includeSubdomains\";\n\n    location / {\n        proxy_pass https://127.0.0.1:8888/;\n        proxy_redirect default ;\n    }\n}</pre>\n				</div>\n			</div>\n			<p>\n				3.配置host:\n			</p>\n			<div class=\"highlighter-rouge\" style=\"margin:0px;padding:0px;\">\n				<div class=\"highlight\" style=\"margin:0px 0px 16px;padding:0px;\">\n<pre class=\"highlight\">127.0.0.1    www.test.com</pre>\n				</div>\n			</div>\n			<p>\n				现在让我们打开chrome浏览器：https://www.test.com\n			</p>\n			<p>\n				<img src=\"/public/plugin/kindeditor/attached/image/20180623/20180623102110_54265.jpg\" alt=\"https_403\" style=\"height:auto;width:auto;\" /> \n			</p>\n			<p>\n				靠。。。。。被忽悠了吗？什么情况？？？？？？\n			</p>\n			<p>\n				回想一下，漏掉了什么吗？\n			</p>\n			<h3 id=\"ca证书安装\" style=\"font-size:1.25em;\">\n				CA证书安装\n			</h3>\n			<p>\n				没错我们客户端的CA证书还没有安装啊。自己签发的证书是需要自己手动安装的。\n			</p>\n			<p>\n				1.找到生成好的ca.crt证书，双击点击安装：\n			</p>\n			<p>\n				<img src=\"/public/plugin/kindeditor/attached/image/20180623/20180623102151_31021.jpg\" alt=\"ca_install\" style=\"height:auto;width:auto;\" /> \n			</p>\n			<p>\n				2.选择安装为受信任的根证书颁发机构：\n			</p>\n			<p>\n				<img src=\"/public/plugin/kindeditor/attached/image/20180623/20180623102220_18359.jpg\" alt=\"ca_save\" style=\"height:auto;width:auto;\" /> \n			</p>\n			<p>\n				好了，关闭浏览器重新访问：\n			</p>\n			<p>\n				<img src=\"/public/plugin/kindeditor/attached/image/20180327/20180327033143_67797.jpg\" alt=\"\" style=\"height:auto;width:auto;\" width=\"97\" height=\"24\" title=\"\" align=\"\" /> \n			</p>\n			<p>\n				ok ， 大功告成！！！！！\n			</p>\n			<h2 id=\"总结\">\n				总结\n			</h2>\n			<p>\n				现在回顾一下这整个颁发证书的流程：\n			</p>\n			<p>\n				<img src=\"/public/plugin/kindeditor/attached/image/20180623/20180623102300_88063.jpg\" alt=\"https_ca\" style=\"height:auto;width:auto;\" /> \n			</p>\n			<p>\n				项目目录结构：\n			</p>\n			<p>\n				<img src=\"/public/plugin/kindeditor/attached/image/20180623/20180623102311_18410.jpg\" alt=\"dir\" style=\"height:auto;width:auto;\" /> \n			</p>\n			<p>\n				<br />\n			</p>\n<pre class=\" language-http\">原文地址： <a href=\"https://yi-love.github.io/articles/https-ca\" target=\"_blank\">HTTPS自签发CA证书</a></pre>\n			<p>\n				<br />\n			</p>\n		</div>\n	</div>\n</div>',0,1522050130,1529752366),(9,1,6,'HSTS详解','','<div>\n	<h3>\n		1. 缘起：启用HTTPS也不够安全\n	</h3>\n	<p>\n		有不少网站只通过HTTPS对外提供服务，但用户在访问某个网站的时候，在浏览器里却往往直接输入网站域名（例如www.example.com），而不是输入完整的URL（例如https://www.example.com），不过浏览器依然能正确的使用HTTPS发起请求。这背后多亏了服务器和浏览器的协作，如下图所示。\n	</p>\n	<div class=\"image-package\">\n		<div class=\"image-container\">\n			<div class=\"image-container-fill\">\n			</div>\n			<div class=\"image-view\">\n				<img class=\"\" src=\"//upload-images.jianshu.io/upload_images/1968-bc295c8a2cd2e261.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/458\" /> \n			</div>\n		</div>\n		<div class=\"image-caption\">\n			图1：服务器和浏览器在背后帮用户做了很多工作\n		</div>\n	</div>\n	<p>\n		简单来讲就是，浏览器向网站发起一次HTTP请求，在得到一个重定向响应后，发起一次HTTPS请求并得到最终的响应内容。所有的这一切对用户而言是完全透明的，所以在用户眼里看来，在浏览器里直接输入域名却依然可以用HTTPS协议和网站进行安全的通信，是个不错的用户体验。\n	</p>\n	<p>\n		一切看上去都是那么的完美，但其实不然，由于在建立起HTTPS连接之前存在一次明文的HTTP请求和重定向（上图中的第1、2步），使得攻击者可以以中间人的方式劫持这次请求，从而进行后续的攻击，例如窃听数据，篡改请求和响应，跳转到钓鱼网站等。\n	</p>\n	<p>\n		以劫持请求并跳转到钓鱼网站为例，其大致做法如下图所示：\n	</p>\n	<div class=\"image-package\">\n		<div class=\"image-container\">\n			<div class=\"image-container-fill\">\n			</div>\n			<div class=\"image-view\">\n				<img class=\"\" src=\"//upload-images.jianshu.io/upload_images/1968-14a5083632ed267a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/643\" /> \n			</div>\n		</div>\n		<div class=\"image-caption\">\n			图2：劫持HTTP请求，阻止HTTPS连接，并进行钓鱼攻击\n		</div>\n	</div>\n	<ul>\n		<li>\n			第1步：浏览器发起一次明文HTTP请求，但实际上会被攻击者拦截下来\n		</li>\n		<li>\n			第2步：攻击者作为代理，把当前请求转发给钓鱼网站\n		</li>\n		<li>\n			第3步：钓鱼网站返回假冒的网页内容\n		</li>\n		<li>\n			第4步：攻击者把假冒的网页内容返回给浏览器\n		</li>\n	</ul>\n	<p>\n		这个攻击的精妙之处在于，攻击者直接劫持了HTTP请求，并返回了内容给浏览器，根本不给浏览器同真实网站建立HTTPS连接的机会，因此浏览器会误以为真实网站通过HTTP对外提供服务，自然也就不会向用户报告当前的连接不安全。于是乎攻击者几乎可以神不知鬼不觉的对请求和响应动手脚。\n	</p>\n	<h3>\n		2. 解决之道：使用HSTS\n	</h3>\n	<p>\n		既然建立HTTPS连接之前的这一次HTTP明文请求和重定向有可能被攻击者劫持，那么解决这一问题的思路自然就变成了如何避免出现这样的HTTP请求。我们期望的浏览器行为是，当用户让浏览器发起HTTP请求的时候，浏览器将其转换为HTTPS请求，直接略过上述的HTTP请求和重定向，从而使得中间人攻击失效，规避风险。其大致流程如下：\n	</p>\n	<div class=\"image-package\">\n		<div class=\"image-container\">\n			<div class=\"image-container-fill\">\n			</div>\n			<div class=\"image-view\">\n				<img class=\"\" src=\"//upload-images.jianshu.io/upload_images/1968-e86d43f9afeadba4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/422\" /> \n			</div>\n		</div>\n		<div class=\"image-caption\">\n			图3：略过HTTP请求和重定向，直接发送HTTPS请求\n		</div>\n	</div>\n	<ul>\n		<li>\n			第1步：用户在浏览器地址栏里输入网站域名，浏览器得知该域名应该使用HTTPS进行通信\n		</li>\n		<li>\n			第2步：浏览器直接向网站发起HTTPS请求\n		</li>\n		<li>\n			第3步：网站返回相应的内容\n		</li>\n	</ul>\n	<p>\n		那么问题来了，浏览器是如何做到这一点的呢？它怎么知道那个网站应该发HTTPS请求，那个网站应该用HTTP请求呢？此时就该HSTS粉墨登场了。\n	</p>\n	<h3>\n		2.1 HSTS\n	</h3>\n	<p>\n		HSTS的全称是<strong>H</strong>TTP <strong>S</strong>trict-<strong>T</strong>ransport-<strong>S</strong>ecurity，它是一个Web安全策略机制（web security policy mechanism）。\n	</p>\n	<p>\n		HSTS最早于2015年被纳入到ThoughtWorks技术雷达，并且在2016年的最新一期技术雷达里，它直接从“评估（Trial）”阶段进入到了“采用（Adopt）“阶段，这意味着ThoughtWorks强烈主张业界积极采用这项安全防御措施，并且ThoughtWorks已经将其应用于自己的项目。\n	</p>\n	<p>\n		HSTS最为核心的是一个HTTP响应头（HTTP Response Header）。正是它可以让浏览器得知，在接下来的一段时间内，当前域名只能通过HTTPS进行访问，并且在浏览器发现当前连接不安全的情况下，强制拒绝用户的后续访问要求。\n	</p>\n	<p>\n		HSTS Header的语法如下：\n	</p>\n	<p>\n		Strict-Transport-Security: <max-age=>[; includeSubDomains][; preload]</max-age=>\n	</p>\n	<p>\n		其中：\n	</p>\n	<ul>\n		<li>\n			max-age是必选参数，是一个以秒为单位的数值，它代表着HSTS Header的过期时间，通常设置为1年，即31536000秒。\n		</li>\n		<li>\n			includeSubDomains是可选参数，如果包含它，则意味着当前域名及其子域名均开启HSTS保护。\n		</li>\n		<li>\n			preload是可选参数，只有当你申请将自己的域名加入到浏览器内置列表的时候才需要使用到它。关于浏览器内置列表，下文有详细介绍。\n		</li>\n	</ul>\n	<h4>\n		2.2 让浏览器直接发起HTTPS请求####\n	</h4>\n	<p>\n		只要在服务器返回给浏览器的响应头中，增加Strict-Transport-Security这个HTTP Header（下文简称HSTS Header），例如：\n	</p>\n	<p>\n		Strict-Transport-Security: max-age=31536000; includeSubDomains\n	</p>\n	<p>\n		就可以告诉浏览器，在接下来的31536000秒内（1年），对于当前域名及其子域名的后续通信应该强制性的只使用HTTPS，直到超过有效期为止。\n	</p>\n	<p>\n		完整的流程如下图所示：\n	</p>\n	<div class=\"image-package\">\n		<div class=\"image-container\">\n			<div class=\"image-container-fill\">\n			</div>\n			<div class=\"image-view\">\n				<img class=\"\" src=\"//upload-images.jianshu.io/upload_images/1968-6ae83d1a20aab63c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/601\" /> \n			</div>\n		</div>\n		<div class=\"image-caption\">\n			图4：完整的HSTS流程\n		</div>\n	</div>\n	<p>\n		只要是在有效期内，浏览器都将直接强制性的发起HTTPS请求，但是问题又来了，有效期过了怎么办？其实不用为此过多担心，因为HSTS Header存在于每个响应中，随着用户和网站的交互，这个有效时间时刻都在刷新，再加上有效期通常都被设置成了1年，所以只要用户的前后两次请求之间的时间间隔没有超过1年，则基本上不会出现安全风险。更何况，就算超过了有效期，但是只要用户和网站再进行一次新的交互，用户的浏览器又将开启有效期为1年的HSTS保护。\n	</p>\n	<h4>\n		2.3 让浏览器强制拒绝不安全的链接，不给用户选择的机会####\n	</h4>\n	<p>\n		在没有HSTS保护的情况下，当浏览器发现当前网站的证书出现错误，或者浏览器和服务器之间的通信不安全，无法建立HTTPS连接的时候，浏览器通常会警告用户，但是却又允许用户继续不安全的访问。如下图所示，用户可以点击图中红色方框中的链接，继续在不安全的连接下进行访问。\n	</p>\n	<div class=\"image-package\">\n		<div class=\"image-container\">\n			<div class=\"image-container-fill\">\n			</div>\n			<div class=\"image-view\">\n				<img class=\"\" src=\"//upload-images.jianshu.io/upload_images/1968-8466a54c37bb89fc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/484\" /> \n			</div>\n		</div>\n		<div class=\"image-caption\">\n			图5：浏览器依然允许用户进行不安全的访问\n		</div>\n	</div>\n	<p>\n		理论上而言，用户看到这个警告之后就应该提高警惕，意识到自己和网站之间的通信不安全，可能被劫持也可能被窃听，如果访问的恰好是银行、金融类网站的话后果更是不堪设想，理应终止后续操作。然而现实很残酷，就我的实际观察来看，有不少用户在遇到这样的警告之后依然选择了继续访问。\n	</p>\n	<p>\n		不过随着HSTS的出现，事情有了转机。对于启用了浏览器HSTS保护的网站，如果浏览器发现当前连接不安全，它将仅仅警告用户，而不再给用户提供是否继续访问的选择，从而避免后续安全问题的发生。例如，当访问Google搜索引擎的时候，如果当前通信连接存在安全问题，浏览器将会<strong>彻底阻止</strong>用户继续访问Google，如下图所示。\n	</p>\n	<div class=\"image-package\">\n		<div class=\"image-container\">\n			<div class=\"image-container-fill\">\n			</div>\n			<div class=\"image-view\">\n				<img class=\"\" src=\"//upload-images.jianshu.io/upload_images/1968-127dd6ebc8e81625.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/700\" /> \n			</div>\n		</div>\n		<div class=\"image-caption\">\n			图6：浏览器彻底阻止用户继续进行不安全的访问\n		</div>\n	</div>\n	<h3>\n		3. 道高一尺魔高一丈：攻击者依然有可乘之机\n	</h3>\n	<p>\n		细心的你可能发现了，HSTS存在一个比较薄弱的环节，那就是浏览器没有当前网站的HSTS信息的时候，或者第一次访问网站的时候，依然需要一次明文的HTTP请求和重定向才能切换到HTTPS，以及刷新HSTS信息。而就是这么一瞬间却给攻击者留下了可乘之机，使得他们可以把这一次的HTTP请求劫持下来，继续中间人攻击。\n	</p>\n	<h3>\n		4. Preload List：让防御更加彻底\n	</h3>\n	<p>\n		针对上面的攻击，HSTS也有应对办法，那就是在浏览器里内置一个列表，只要是在这个列表里的域名，无论何时、何种情况，浏览器都只使用HTTPS发起连接。这个列表由Google Chromium维护，FireFox、Safari、IE等主流浏览器均在使用。\n	</p>\n	<h3>\n		5. 一些Tips\n	</h3>\n	<h4>\n		Tips 1：如何配置HSTS\n	</h4>\n	<p>\n		很多地方都可以进行HSTS的配置，例如反向代理服务器、应用服务器、应用程序框架，以及应用程序中自定义Header。你可以根据实际情况进行选择。\n	</p>\n	<p>\n		常见的是在代理服务器中进行配置，以Nginx为例，只需在配置文件中加上下面这条指令即可：<br />\nadd_header Strict-Transport-Security \"max-age=31536000; includeSubDomains\" always;\n	</p>\n	<p>\n		不过需要特别注意的是，在生产环境下使用HSTS应当特别谨慎，因为一旦浏览器接收到HSTS Header（假如有效期是1年），但是网站的证书又恰好出了问题，那么用户将在接下来的1年时间内都无法访问到你的网站，直到证书错误被修复，或者用户主动清除浏览器缓存。因此，建议在生产环境开启HSTS的时候，先将max-age的值设置小一些，例如5分钟，然后检查HSTS是否能正常工作，网站能否正常访问，之后再逐步将时间延长，例如1周、1个月，并在这个时间范围内继续检查HSTS是否正常工作，最后才改到1年。\n	</p>\n	<h4>\n		Tips 2：如何加入到HSTS Preload List\n	</h4>\n	<p>\n		根据官方说明，你的网站在具备以下几个条件后，可以提出申请加入到这个列表里。\n	</p>\n	<ul>\n		<li>\n			具备一个有效的证书\n		</li>\n		<li>\n			在同一台主机上提供重定向响应，以及接收重定向过来的HTTPS请求\n		</li>\n		<li>\n			所有子域名均使用HTTPS\n		</li>\n		<li>\n			在根域名的HTTP响应头中，加入HSTS Header，并满足下列条件：\n			<ul>\n				<li>\n					过期时间最短不得少于18周（10886400秒）\n				</li>\n				<li>\n					必须包含includeSubDomains参数\n				</li>\n				<li>\n					必须包含preload参数<br />\n当你准好这些之后，可以在HSTS Preload List的官网上（https://hstspreload.org）提交申请，或者了解更多详细的内容。\n				</li>\n			</ul>\n		</li>\n	</ul>\n	<h4>\n		Tips 3：如何查询域名是否加入到了Preload List\n	</h4>\n	<p>\n		从提交申请到完成审核，成功加入到内置列表 ，中间可能需要等待几天到几周不等的时间。可通过官网https://hstspreload.org或在Chrome地址栏里输入chrome://net-internals/#hsts查询状态。\n	</p>\n	<h3>\n		总结\n	</h3>\n	<p>\n		随着越来越多的网站开始使用HTTPS，甚至是开启全站HTTPS，数据在传输过程中的安全性能够得到极大的保障，与此同时，通过HSTS的帮助，避免SSL Stripping或者中间人攻击，能够使得数据通信变得更加安全。希望本篇文章通过对HSTS的解析，能使得更多的开发团队将HSTS运用到自己的项目中。\n	</p>\n</div>\n<pre class=\" language-http\">原文地址： <a href=\"https://www.jianshu.com/p/caa80c7ad45c\" target=\"_blank\">HSTS详解</a></pre>',0,1529752568,1529752783);
/*!40000 ALTER TABLE `vk_article` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `vk_article_category`
--

DROP TABLE IF EXISTS `vk_article_category`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `vk_article_category` (
  `id` int(11) NOT NULL AUTO_INCREMENT COMMENT '分类ID',
  `parent_id` int(11) NOT NULL COMMENT '父节点ID',
  `name` varchar(30) NOT NULL COMMENT '分类名称',
  `is_deleted` tinyint(1) NOT NULL COMMENT '是否删除（0：否；1：是）',
  `create_time` int(11) NOT NULL COMMENT '创建时间',
  `update_time` int(11) NOT NULL COMMENT '更新时间',
  PRIMARY KEY (`id`)
) ENGINE=MyISAM AUTO_INCREMENT=47 DEFAULT CHARSET=utf8 COMMENT='文章分类表';
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `vk_article_category`
--

LOCK TABLES `vk_article_category` WRITE;
/*!40000 ALTER TABLE `vk_article_category` DISABLE KEYS */;
INSERT INTO `vk_article_category` VALUES (1,0,'前端开发',0,1449145032,1449145032),(2,0,'后端开发',0,1449145031,1449145031),(3,0,'移动开发',0,1449145031,1449145031),(4,0,'数据库',0,1449145031,1449145031),(5,0,'云计算&大数据',0,1449145031,1449145031),(6,0,'运维&测试',0,1449145031,1449145031),(7,0,'UI设计',0,1449145031,1449145031),(8,0,'旅行',0,1449145031,1449145031),(9,0,'其它',0,1449145031,1449145031),(10,1,'HTML/CSS',0,1449145031,1449145031),(11,1,'JavaScript',0,1449145031,1449145031),(12,1,'Html5',0,1449145031,1449145031),(13,1,'CSS3',0,1449145031,1449145031),(14,1,'jQuery',0,1449145031,1449145031),(15,1,'Node.js',0,1449145031,1449145031),(16,1,'AngularJS',0,1449145031,1449145031),(17,1,'Bootstrap',0,1449145031,1449145031),(18,1,'React.JS',0,1449145031,1449145031),(19,1,'Vue.js',0,1449145031,1449145031),(20,1,'Sass/Less',0,1449145031,1449145031),(21,1,'WebApp',0,1449145031,1449145031),(22,1,'前端工具',0,1449145031,1449145031),(23,2,'PHP',0,1449145031,1449145031),(24,2,'Java',0,1449145031,1449145031),(25,2,'Python',0,1449145031,1449145031),(26,2,'C',0,1449145031,1449145031),(27,2,'C++',0,1449145031,1449145031),(28,2,'Go',0,1449145031,1449145031),(29,2,'C#',0,1449145031,1449145031),(30,2,'Ruby',0,1449145031,1449145031),(31,3,'Android',0,1449145031,1449145031),(32,3,'IOS',0,1449145031,1449145031),(33,3,'Unity 3D',0,1449145031,1449145031),(34,3,'Cocos2d-x',0,1449145031,1449145031),(35,4,'MySQL',0,1449145031,1449145031),(36,4,'MongoDB',0,1449145031,1449145031),(37,4,'Oracle',0,1449145031,1449145031),(38,4,'SQL Server',0,1449145031,1449145031),(39,5,'大数据',0,1449145031,1449145031),(40,5,'云计算',0,1449145031,1449145031),(41,6,'测试',0,1449145031,1449145031),(42,6,'Linux',0,1449145031,1449145031),(43,7,'动画特效',0,1449145031,1449145031),(44,7,'APPUI设计',0,1449145031,1449145031),(45,7,'设计工具',0,1449145031,1449145031),(46,7,'设计基础',0,1449145031,1449145031);
/*!40000 ALTER TABLE `vk_article_category` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `vk_user`
--

DROP TABLE IF EXISTS `vk_user`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `vk_user` (
  `id` int(11) NOT NULL AUTO_INCREMENT COMMENT '用户ID',
  `nick` varchar(30) DEFAULT NULL COMMENT '昵称',
  `user_name` varchar(30) NOT NULL COMMENT '用户名',
  `user_pwd` varchar(60) NOT NULL COMMENT '用户密码',
  `email` varchar(60) NOT NULL COMMENT '邮箱',
  `phone` char(11) NOT NULL COMMENT '手机号',
  `type` tinyint(1) NOT NULL,
  `valid` tinyint(1) NOT NULL COMMENT '是否通过验证（1是2否）',
  `create_time` int(11) NOT NULL COMMENT '创建时间',
  `update_time` int(11) NOT NULL COMMENT '更新时间',
  PRIMARY KEY (`id`)
) ENGINE=MyISAM AUTO_INCREMENT=19 DEFAULT CHARSET=utf8 COMMENT='用户表';
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `vk_user`
--

LOCK TABLES `vk_user` WRITE;
/*!40000 ALTER TABLE `vk_user` DISABLE KEYS */;
INSERT INTO `vk_user` VALUES (1,'谢大年','visk','74ce4a21f159e81638334cbe243cd2cf','visk100@163.com','18500628535',1,1,1449145032,1449145032),(2,'刘营生','liuyansheng','74ce4a21f159e81638334cbe243cd2cf','3456@qq.com','18523456763',1,1,1449145032,1449145032),(3,'谢小年','visk100','74ce4a21f159e81638334cbe243cd2cf','visk100@163.com','18500628535',0,1,1449145032,1449145032),(18,'谢金祥','xiejinxiang','74ce4a21f159e81638334cbe243cd2cf','xiejinxiang@163.com','18500786788',0,2,1449145032,1449145032);
/*!40000 ALTER TABLE `vk_user` ENABLE KEYS */;
UNLOCK TABLES;
/*!40103 SET TIME_ZONE=@OLD_TIME_ZONE */;

/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;
/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */;
/*!40014 SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS */;
/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
/*!40111 SET SQL_NOTES=@OLD_SQL_NOTES */;

-- Dump completed on 2018-09-13 17:04:15
